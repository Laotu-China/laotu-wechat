{"version":3,"sources":["index.js","compress.js","usage.js","clean/index.js","clean/Atrule.js","clean/utils.js","clean/Comment.js","clean/Declaration.js","clean/Raw.js","clean/Rule.js","clean/TypeSelector.js","clean/WhiteSpace.js","replace/index.js","replace/Atrule.js","replace/atrule/keyframes.js","replace/AttributeSelector.js","replace/Value.js","replace/property/font.js","replace/property/font-weight.js","replace/property/background.js","replace/property/border.js","replace/Dimension.js","replace/Number.js","replace/Percentage.js","replace/String.js","replace/Url.js","replace/color.js","restructure/index.js","restructure/prepare/index.js","restructure/prepare/createDeclarationIndexer.js","restructure/prepare/processSelector.js","restructure/prepare/specificity.js","restructure/1-mergeAtrule.js","restructure/2-initialMergeRuleset.js","restructure/utils.js","restructure/3-disjoinRuleset.js","restructure/4-restructShorthand.js","restructure/6-restructBlock.js","restructure/7-mergeRuleset.js","restructure/8-restructRuleset.js","../package.json"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ACFA,AFMA,ADGA,AENA;ACFA,AFMA,ADGA,AENA;ACFA,AFMA,ADGA,AENA;AELA,ADGA,AFMA,ADGA,AENA;AELA,ADGA,AFMA,ADGA,AENA;AELA,ADGA,AFMA,ADGA,AENA;AELA,ADGA,AENA,AJYA,ADGA,AENA;AELA,ADGA,AENA,AJYA,ADGA,AENA;AELA,ADGA,AENA,AJYA,ADGA,AENA;AELA,AENA,AHSA,AENA,AJYA,ADGA,AENA;AELA,AENA,AHSA,AENA,AJYA,ADGA,AENA;AELA,AENA,AHSA,AENA,AJYA,ADGA,AENA;AELA,AENA,ACHA,AJYA,AENA,AJYA,ADGA,AENA;AELA,AGTA,AJYA,AENA,AJYA,ADGA,AENA;AELA,AGTA,AJYA,AENA,AJYA,ADGA,AENA;AELA,AGTA,ACHA,ALeA,AFMA,ADGA,AENA;AELA,AGTA,ACHA,ALeA,AFMA,ADGA,AENA;AELA,AGTA,ACHA,ALeA,AFMA,ADGA,AENA;AELA,AIZA,ACHA,ANkBA,AFMA,ADGA,AENA;AELA,AIZA,ACHA,ANkBA,AFMA,ADGA,AENA;AELA,AIZA,ACHA,ANkBA,AFMA,ADGA,AENA;AELA,AIZA,ACHA,ACHA,AT2BA,ADGA,AENA;AELA,AIZA,ACHA,ACHA,AT2BA,ADGA,AENA;AELA,AIZA,ACHA,ACHA,AT2BA,ADGA,AENA;AELA,AIZA,ACHA,ACHA,ACHA,AV8BA,ADGA,AENA;AELA,AKfA,ACHA,ACHA,AV8BA,ADGA,AENA;AELA,AKfA,ACHA,ACHA,AV8BA,ADGA,AENA;AELA,AKfA,ACHA,ACHA,AV8BA,ADGA,AYpCA,AV8BA;AELA,AKfA,ACHA,ACHA,AV8BA,ADGA,AYpCA,AV8BA;AELA,AKfA,ACHA,ACHA,AV8BA,ADGA,AYpCA,AV8BA;AELA,AKfA,ACHA,ACHA,AV8BA,ADGA,AavCA,ADGA,AV8BA;AELA,AKfA,ACHA,ACHA,AV8BA,ADGA,AavCA,ADGA,AV8BA;AELA,AKfA,ACHA,ACHA,AV8BA,ADGA,AavCA,ADGA,AV8BA;AELA,AKfA,ACHA,ACHA,AV8BA,ADGA,AavCA,ACHA,AFMA,AV8BA;AELA,AKfA,ACHA,ACHA,AV8BA,ADGA,AavCA,ACHA,AFMA,AV8BA;AELA,AKfA,ACHA,ACHA,AV8BA,ADGA,AavCA,ACHA,AFMA,AV8BA;AELA,AKfA,ACHA,ACHA,AV8BA,ADGA,AavCA,AENA,ADGA,AFMA,AV8BA;AELA,AKfA,ACHA,ACHA,AV8BA,ADGA,AavCA,AENA,ADGA,AFMA,AV8BA;AELA,AKfA,ACHA,ACHA,AV8BA,ADGA,AavCA,AENA,ADGA,AFMA,AV8BA;AELA,AKfA,ACHA,ACHA,AV8BA,ADGA,AavCA,AENA,ACHA,AFMA,AFMA,AV8BA;AELA,AKfA,ACHA,ACHA,AV8BA,ADGA,Ae7CA,ACHA,AFMA,AFMA,AV8BA;AELA,AKfA,AENA,AV8BA,ADGA,Ae7CA,ACHA,AFMA,AFMA,AV8BA;AELA,AKfA,AENA,AV8BA,ADGA,Ae7CA,ACHA,AFMA,AFMA,AKfA,Af6CA;AELA,AKfA,AENA,AV8BA,ADGA,Ae7CA,ACHA,AFMA,AFMA,AKfA,Af6CA;AELA,AKfA,AENA,AV8BA,ADGA,Ae7CA,ACHA,AFMA,AFMA,AKfA,Af6CA;AELA,AKfA,AENA,AV8BA,ADGA,Ae7CA,ACHA,AFMA,AFMA,AMlBA,ADGA,Af6CA;AELA,AKfA,AENA,AV8BA,ADGA,Ae7CA,ACHA,AFMA,AFMA,AMlBA,ADGA,Af6CA;AELA,AKfA,AENA,AV8BA,ADGA,Ae7CA,ACHA,AFMA,AFMA,AMlBA,ADGA,Af6CA;AELA,AKfA,AENA,AV8BA,ADGA,Ae7CA,ACHA,AFMA,AFMA,AOrBA,ADGA,ADGA,Af6CA;AELA,AKfA,AENA,AV8BA,ADGA,Ae7CA,ACHA,AFMA,AFMA,AOrBA,ADGA,ADGA,Af6CA;AELA,AKfA,AENA,AV8BA,ADGA,Ae7CA,ACHA,AFMA,AFMA,AOrBA,ADGA,ADGA,Af6CA;AELA,AKfA,AENA,AV8BA,ADGA,Ae7CA,ACHA,AFMA,AFMA,AOrBA,ACHA,AFMA,ADGA,Af6CA;AELA,AKfA,AENA,AV8BA,ADGA,Ae7CA,ACHA,AFMA,AKfA,ACHA,AFMA,ADGA,Af6CA;AELA,AKfA,AENA,AV8BA,ADGA,Ae7CA,ACHA,AFMA,AKfA,ACHA,AFMA,ADGA,Af6CA;AELA,AKfA,AENA,AV8BA,ADGA,Ae7CA,AMlBA,ALeA,AFMA,AKfA,ACHA,AFMA,ADGA,Af6CA;AELA,AKfA,ARwBA,ADGA,Ae7CA,AMlBA,ALeA,AGTA,ACHA,AFMA,ADGA,Af6CA;AELA,AKfA,ARwBA,ADGA,Ae7CA,AMlBA,ALeA,AGTA,ACHA,AFMA,ADGA,Af6CA;AELA,AKfA,ARwBA,ADGA,Ae7CA,AMlBA,ACHA,ANkBA,AGTA,ACHA,AFMA,ADGA,Af6CA;AELA,AKfA,ARwBA,ADGA,Ae7CA,AMlBA,ACHA,ANkBA,AGTA,ACHA,AFMA,ADGA,Af6CA;AELA,AKfA,ARwBA,ADGA,Ae7CA,AMlBA,ACHA,ANkBA,AGTA,ACHA,AFMA,ADGA,Af6CA;AELA,AKfA,ARwBA,ADGA,Ae7CA,AMlBA,ACHA,ACHA,AJYA,ACHA,AFMA,ADGA,Af6CA;AELA,AKfA,ARwBA,ADGA,Ae7CA,AMlBA,ACHA,ACHA,AJYA,ACHA,AFMA,ADGA,Af6CA;AELA,AKfA,ARwBA,ADGA,Ae7CA,AMlBA,ACHA,ACHA,AJYA,ACHA,AFMA,ADGA,Af6CA;AELA,AKfA,ARwBA,ADGA,Ae7CA,AMlBA,ACHA,ACHA,ACHA,ALeA,ACHA,AFMA,ADGA,Af6CA;AELA,AKfA,ARwBA,ADGA,Ae7CA,AMlBA,ACHA,ACHA,ACHA,ALeA,ACHA,AFMA,ADGA,Af6CA;AELA,AKfA,ARwBA,ADGA,Ae7CA,AMlBA,ACHA,ACHA,ACHA,ALeA,ACHA,AFMA,ADGA,Af6CA;AELA,AKfA,ARwBA,ADGA,Ae7CA,AMlBA,ACHA,ACHA,ACHA,ACHA,ANkBA,ACHA,AFMA,ADGA,Af6CA;AELA,AKfA,ARwBA,ADGA,Ae7CA,AMlBA,ACHA,ACHA,ACHA,ACHA,ANkBA,ACHA,AFMA,ADGA,Af6CA;AELA,AKfA,ARwBA,ADGA,Ae7CA,AMlBA,ACHA,ACHA,ACHA,ACHA,ANkBA,ACHA,AHSA,Af6CA;AELA,AKfA,ARwBA,ADGA,Ae7CA,AMlBA,ACHA,ACHA,ACHA,ACHA,ACHA,APqBA,ACHA,AHSA,Af6CA;AOpBA,ARwBA,ADGA,AqB/DA,ACHA,ACHA,ACHA,ACHA,ACHA,APqBA,ACHA,AHSA,Af6CA;AOpBA,ARwBA,ADGA,AqB/DA,ACHA,ACHA,ACHA,ACHA,ACHA,APqBA,ACHA,AHSA,Af6CA;AOpBA,ARwBA,ADGA,AqB/DA,ACHA,ACHA,ACHA,ACHA,ACHA,APqBA,ACHA,AHSA,AU9BA,AzB2EA;AOpBA,ARwBA,ADGA,AqB/DA,ACHA,ACHA,ACHA,ACHA,ACHA,APqBA,ACHA,AHSA,AU9BA,AzB2EA;AOpBA,ARwBA,ADGA,AqB/DA,ACHA,ACHA,ACHA,ACHA,ACHA,APqBA,ACHA,AHSA,AU9BA,AzB2EA;AOpBA,ARwBA,ADGA,AqB/DA,ACHA,ACHA,ACHA,ACHA,ACHA,APqBA,ACHA,AHSA,AU9BA,ACHA,A1B8EA;AOpBA,ARwBA,ADGA,AqB/DA,ACHA,ACHA,AENA,ACHA,APqBA,ACHA,AHSA,AU9BA,ACHA,A1B8EA;AOpBA,ARwBA,ADGA,AqB/DA,ACHA,ACHA,AENA,ACHA,APqBA,ACHA,AHSA,AU9BA,ACHA;AnB0DA,ARwBA,ADGA,AqB/DA,ACHA,ACHA,AENA,ACHA,APqBA,ACHA,AHSA,AU9BA,AENA,ADGA;AnB0DA,ARwBA,ADGA,AqB/DA,ACHA,ACHA,AENA,ACHA,APqBA,ACHA,AHSA,AU9BA,AENA,ADGA;AnB0DA,ARwBA,ADGA,AqB/DA,ACHA,ACHA,AENA,ACHA,APqBA,ACHA,AHSA,AU9BA,AENA,ADGA;AnB0DA,ARwBA,ADGA,AqB/DA,ACHA,ACHA,AENA,ACHA,APqBA,ACHA,AHSA,AU9BA,AENA,ADGA,AENA;ArBgEA,ARwBA,ADGA,AqB/DA,ACHA,ACHA,AENA,ACHA,APqBA,ACHA,AHSA,AU9BA,AENA,ADGA,AENA;ArBgEA,ARwBA,ADGA,AqB/DA,ACHA,ACHA,AENA,ACHA,APqBA,AFMA,AU9BA,AENA,ADGA,AENA;ArBgEA,ARwBA,ADGA,AqB/DA,ACHA,ACHA,AENA,ACHA,APqBA,AFMA,AU9BA,AENA,ADGA,AENA,ACHA;AtBmEA,ARwBA,ADGA,AqB/DA,ACHA,ACHA,AENA,ACHA,APqBA,AFMA,AU9BA,AENA,ADGA,AENA,ACHA;AtBmEA,ARwBA,ADGA,AqB/DA,ACHA,ACHA,AENA,ACHA,APqBA,AFMA,AU9BA,AENA,ADGA,AENA,ACHA;AtBmEA,ARwBA,ADGA,AqB/DA,ACHA,ACHA,AENA,ACHA,APqBA,AFMA,Ae7CA,ALeA,AENA,ADGA,AENA,ACHA;AtBmEA,ARwBA,ADGA,AqB/DA,ACHA,ACHA,AENA,ACHA,APqBA,AavCA,ALeA,AENA,ADGA,AENA,ACHA;AtBmEA,ARwBA,ADGA,AqB/DA,ACHA,ACHA,AENA,ACHA,APqBA,AavCA,ALeA,AENA,ADGA,AENA,ACHA;AtBmEA,ARwBA,ADGA,AqB/DA,ACHA,ACHA,AENA,ACHA,APqBA,AavCA,ACHA,ANkBA,AENA,ADGA,AENA,ACHA;AtBmEA,ARwBA,ADGA,AqB/DA,ACHA,ACHA,AENA,ACHA,APqBA,AavCA,ACHA,ANkBA,AENA,ADGA,AENA,ACHA;AtBmEA,ARwBA,ADGA,AqB/DA,ACHA,ACHA,AENA,ACHA,APqBA,AavCA,ACHA,ANkBA,AENA,ADGA,AENA,ACHA;AtBmEA,ARwBA,ADGA,AqB/DA,ACHA,ACHA,AENA,ACHA,APqBA,AavCA,ACHA,ANkBA,AENA,ADGA,AENA,ACHA,AGTA;AzB4EA,ARwBA,ADGA,AqB/DA,ACHA,ACHA,AENA,ACHA,APqBA,AavCA,ACHA,ANkBA,AENA,ADGA,AENA,ACHA,AGTA;AzB4EA,ARwBA,ADGA,AqB/DA,ACHA,ACHA,AENA,ACHA,APqBA,AavCA,ACHA,ANkBA,AENA,ADGA,AENA,ACHA,AGTA;AzB4EA,ARwBA,ADGA,AqB/DA,ACHA,ACHA,AENA,ACHA,APqBA,AavCA,ACHA,AENA,ARwBA,AENA,ADGA,AENA,ACHA,AGTA;AzB4EA,ARwBA,ADGA,AqB/DA,AIZA,ACHA,APqBA,AavCA,ACHA,AENA,ARwBA,AENA,ADGA,AENA,ACHA,AGTA;AzB4EA,ARwBA,ADGA,AqB/DA,AIZA,ACHA,APqBA,AavCA,ACHA,AENA,ARwBA,AENA,ADGA,AENA,ACHA,AGTA;AzB4EA,ARwBA,ADGA,AqB/DA,AIZA,ACHA,APqBA,AavCA,ACHA,AENA,ACHA,AT2BA,AENA,ADGA,AENA,ACHA,AGTA;AzB4EA,ARwBA,ADGA,AqB/DA,AKfA,APqBA,AavCA,ACHA,AENA,ACHA,AT2BA,AENA,ADGA,AENA,ACHA,AGTA;AzB4EA,ARwBA,ADGA,AqB/DA,AKfA,APqBA,AavCA,ACHA,AENA,ACHA,AT2BA,AENA,ADGA,AENA,ACHA,AGTA;AzB4EA,ARwBA,ADGA,AqB/DA,AKfA,APqBA,AavCA,ACHA,AENA,ACHA,ACHA,AV8BA,AENA,ADGA,AENA,ACHA,AGTA;AzB4EA,ARwBA,ADGA,AqB/DA,AKfA,APqBA,AavCA,ACHA,AENA,ACHA,ACHA,AV8BA,AENA,ADGA,AENA,ACHA,AGTA;AzB4EA,ARwBA,ADGA,AqB/DA,AKfA,APqBA,AavCA,ACHA,AENA,ACHA,ACHA,AV8BA,AENA,ADGA,AENA,ACHA,AGTA;AzB4EA,ARwBA,ADGA,AqB/DA,AKfA,APqBA,AavCA,ACHA,AENA,ACHA,ACHA,ACHA,AXiCA,AENA,ADGA,AENA,ACHA,AGTA;AzB4EA,ARwBA,ADGA,AqB/DA,AKfA,APqBA,AavCA,ACHA,AENA,ACHA,ACHA,ACHA,AXiCA,AENA,ADGA,AENA,ACHA,AGTA;AzB4EA,ARwBA,ADGA,AqB/DA,AKfA,APqBA,AavCA,ACHA,AENA,ACHA,ACHA,ACHA,AXiCA,AENA,ADGA,AENA,ACHA,AGTA;AzB4EA,ARwBA,ADGA,AqB/DA,AKfA,APqBA,AavCA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,AV8BA,ADGA,AENA,ACHA,AGTA;AzB4EA,ARwBA,ADGA,AqB/DA,AKfA,APqBA,AavCA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,AV8BA,ADGA,AENA,ACHA,AGTA;AzB4EA,ARwBA,ADGA,AqB/DA,AKfA,APqBA,AavCA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,AXiCA,AENA,ACHA,AGTA;AMjBA,A/B6FA,ARwBA,ADGA,A0B9EA,APqBA,AavCA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,AXiCA,AENA,ACHA,AGTA;AMjBA,AvCqHA,ADGA,A0B9EA,APqBA,AavCA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,AXiCA,AENA,ACHA,AGTA;AMjBA,AvCqHA,ADGA,A0B9EA,APqBA,AavCA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,AXiCA,AENA,ACHA,AGTA;AMjBA,AvCqHA,ADGA,A0B9EA,APqBA,AavCA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,AXiCA,AENA,ACHA,AGTA;AMjBA,AvCqHA,ADGA,A0B9EA,APqBA,AavCA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,AXiCA,AENA,ACHA,AGTA;AMjBA,AvCqHA,ADGA,A0B9EA,APqBA,AavCA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,AXiCA,AENA,ACHA,AGTA;AMjBA,AvCqHA,ADGA,A0B9EA,APqBA,AavCA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,AXiCA,AENA,ACHA,AGTA;AMjBA,AvCqHA,ADGA,A0B9EA,AMlBA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,AXiCA,AENA,ACHA,AGTA;AMjBA,AvCqHA,ADGA,A0B9EA,AMlBA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,AT2BA,ACHA,AGTA;AMjBA,AvCqHA,ADGA,A0B9EA,AMlBA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,AT2BA,ACHA,AGTA;AMjBA,AvCqHA,ADGA,A0B9EA,AMlBA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,AT2BA,ACHA,AGTA;AMjBA,AvCqHA,ADGA,A0B9EA,AMlBA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,AT2BA,ACHA,AGTA;AMjBA,AvCqHA,ADGA,A0B9EA,AMlBA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,AT2BA,ACHA,AGTA;AMjBA,AvCqHA,ADGA,A0B9EA,AMlBA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,AT2BA,ACHA,AGTA;AMjBA,AvCqHA,ADGA,A0B9EA,AMlBA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,AT2BA,ACHA,AGTA;AMjBA,AvCqHA,ADGA,A0B9EA,AMlBA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,AT2BA,ACHA,AGTA;AMjBA,AvCqHA,ADGA,A0B9EA,AMlBA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,AT2BA,ACHA,AGTA;AMjBA,AvCqHA,ADGA,A0B9EA,AMlBA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,AT2BA,ACHA,AGTA;AMjBA,AvCqHA,ADGA,A0B9EA,AMlBA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,AT2BA,ACHA,AGTA;AMjBA,AvCqHA,ADGA,A0B9EA,AMlBA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,AT2BA,ACHA,AGTA;AMjBA,AvCqHA,ADGA,A0B9EA,AMlBA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,AT2BA,ACHA,AGTA;AMjBA,AvCqHA,ADGA,A0B9EA,AMlBA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,AT2BA,ACHA,AGTA;AMjBA,AvCqHA,AyB3EA,AMlBA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,AT2BA,ACHA,AGTA;AMjBA,AvCqHA,AyB3EA,AMlBA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,AT2BA,ACHA,AGTA;AMjBA,AvCqHA,AyB3EA,AMlBA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,AT2BA,ACHA,AGTA;AMjBA,AvCqHA,AyB3EA,AMlBA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,AT2BA,ACHA,AGTA;AMjBA,AvCqHA,AyB3EA,AMlBA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,AT2BA,ACHA,AGTA;AMjBA,AvCqHA,AyB3EA,AMlBA,AGTA,ACHA,ACHA,ACHA,ACHA,AT2BA,ACHA,AGTA;AMjBA,AvCqHA,AyB3EA,AMlBA,AIZA,ACHA,ACHA,ACHA,AT2BA,ACHA,AGTA;AMjBA,AvCqHA,AyB3EA,AMlBA,AIZA,ACHA,ACHA,ACHA,AT2BA,ACHA,AGTA;AMjBA,AvCqHA,AyB3EA,AMlBA,AIZA,ACHA,ACHA,ACHA,AT2BA,AIZA;AMjBA,AvCqHA,AyB3EA,AMlBA,AIZA,ACHA,ACHA,ACHA,AT2BA,AIZA;AMjBA,AvCqHA,AyB3EA,AMlBA,AIZA,ACHA,ACHA,ACHA,AT2BA,AIZA;AMjBA,AvCqHA,AyB3EA,AMlBA,AIZA,ACHA,ACHA,ACHA,AT2BA,AIZA;AMjBA,AvCqHA,AyB3EA,AMlBA,AIZA,ACHA,ACHA,ACHA,AT2BA,AIZA;AMjBA,AvCqHA,AyB3EA,AMlBA,AIZA,ACHA,ACHA,ACHA,AT2BA,AIZA;AMjBA,AvCqHA,AyB3EA,AMlBA,AIZA,ACHA,ACHA,ACHA,AT2BA,AIZA;AMjBA,AvCqHA,AyB3EA,AMlBA,AIZA,ACHA,ACHA,ACHA,AT2BA,AIZA;AMjBA,AvCqHA,AyB3EA,AMlBA,AIZA,ACHA,ACHA,ACHA,AT2BA,AIZA;AMjBA,AvCqHA,AyB3EA,AMlBA,AIZA,ACHA,ACHA,ACHA,AT2BA,AIZA;AMjBA,AvCqHA,AyB3EA,AMlBA,AIZA,ACHA,ACHA,ACHA,AT2BA,AIZA;AMjBA,AvCqHA,AyB3EA,AMlBA,AIZA,ACHA,ACHA,ACHA,AT2BA,AIZA;AMjBA,AvCqHA,AyB3EA,AMlBA,AIZA,ACHA,ACHA,ACHA,AT2BA,AIZA;AMjBA,AvCqHA,AyB3EA,AMlBA,AIZA,ACHA,ACHA,ACHA,AT2BA,AIZA;AMjBA,AvCqHA,AyB3EA,AMlBA,AIZA,ACHA,ACHA,ACHA,AT2BA,AIZA;AMjBA,AvCqHA,AyB3EA,AMlBA,AIZA,ACHA,ACHA,ACHA,AT2BA,AIZA;AMjBA,AvCqHA,AyB3EA,AMlBA,AIZA,ACHA,ACHA,ACHA,AT2BA,AIZA;AMjBA,AvCqHA,AyB3EA,AMlBA,AIZA,ACHA,ACHA,ACHA,AT2BA,AIZA;AMjBA,AvCqHA,AyB3EA,AMlBA,AIZA,ACHA,ACHA,ACHA,AT2BA,AIZA;AMjBA,AvCqHA,AyB3EA,AMlBA,AIZA,ACHA,ACHA,ACHA,AT2BA,AIZA;AMjBA,AvCqHA,AyB3EA,AMlBA,AIZA,ACHA,ACHA,ACHA,AT2BA,AIZA;AMjBA,AvCqHA,AyB3EA,AMlBA,AIZA,ACHA,ACHA,ACHA,AT2BA,AIZA;AMjBA,AvCqHA,AyB3EA,AMlBA,AIZA,ACHA,ACHA,ACHA,AT2BA,AIZA;AMjBA,AvCqHA,AyB3EA,AMlBA,AIZA,ACHA,ACHA,ACHA,AT2BA,AIZA;AMjBA,AvCqHA,AyB3EA,AMlBA,AIZA,ACHA,ACHA,ACHA,AT2BA,AIZA;AMjBA,AvCqHA,AyB3EA,AMlBA,AIZA,ACHA,ACHA,ACHA,AT2BA,AIZA;AMjBA,AvCqHA,AyB3EA,AMlBA,AIZA,ACHA,ACHA,ACHA,AT2BA,AIZA;AMjBA,AvCqHA,AyB3EA,AMlBA,AIZA,ACHA,ACHA,ACHA,AT2BA,AIZA;AMjBA,AvCqHA,AyB3EA,AMlBA,AIZA,ACHA,ACHA,ACHA,AT2BA,AIZA;AMjBA,AvCqHA,AyB3EA,AMlBA,AIZA,ACHA,ACHA,ACHA,AT2BA,AIZA;AMjBA,AvCqHA,AyB3EA,AMlBA,AIZA,ACHA,ACHA,ACHA,AT2BA,AIZA;AMjBA,AvCqHA,AyB3EA,AMlBA,AIZA,ACHA,ACHA,ACHA,AT2BA,AIZA;AMjBA,AvCqHA,AyB3EA,AMlBA,AIZA,ACHA,ACHA,ACHA,AT2BA,AIZA;AMjBA,AvCqHA,AyB3EA,AMlBA,AIZA,ACHA,ACHA,ACHA,AT2BA,AIZA;AMjBA,AvCqHA,AyB3EA,AMlBA,AIZA,ACHA,ACHA,ACHA,AT2BA,AIZA;AMjBA,AvCqHA,AyB3EA,AMlBA,AIZA,ACHA,ACHA,ACHA,ALeA;AMjBA,AvCqHA,AyB3EA,AMlBA,AIZA,ACHA,ACHA,ACHA,ALeA;AMjBA,AvCqHA,AyB3EA,AMlBA,AIZA,ACHA,ACHA,ACHA,ALeA;AMjBA,AvCqHA,AyB3EA,AMlBA,AIZA,ACHA,ACHA,ACHA,ALeA;AMjBA,AvCqHA,AyB3EA,AMlBA,AIZA,ACHA,ACHA,ACHA,ALeA;AMjBA,AvCqHA,AyB3EA,AMlBA,AIZA,ACHA,ACHA,ACHA,ALeA;AMjBA,AvCqHA,AyB3EA,AMlBA,AIZA,ACHA,ACHA,ACHA,ALeA;AMjBA,AvCqHA,AyB3EA,AMlBA,AIZA,ACHA,ACHA,ACHA,ALeA;AMjBA,AvCqHA,AyB3EA,AMlBA,AIZA,ACHA,ACHA,ACHA,ALeA;AMjBA,AvCqHA,AyB3EA,AMlBA,AIZA,ACHA,ACHA,ACHA,ALeA;AMjBA,AvCqHA,AyB3EA,AMlBA,AIZA,ACHA,ACHA,ACHA,ALeA;AMjBA,AvCqHA,AyB3EA,AMlBA,AIZA,ACHA,ACHA,ACHA,ALeA;AMjBA,AvCqHA,AyB3EA,AMlBA,AIZA,ACHA,ACHA,ACHA,ALeA;AMjBA,AvCqHA,AyB3EA,AMlBA,AIZA,ACHA,ACHA,ACHA,ALeA;AMjBA,AvCqHA,AyB3EA,AMlBA,AIZA,ACHA,ACHA,ACHA,ALeA;AMjBA,AvCqHA,AyB3EA,AMlBA,AIZA,ACHA,ACHA,ACHA,ALeA;AMjBA,Ad0CA,AMlBA,AIZA,ACHA,AENA,ALeA;AMjBA,Ad0CA,AMlBA,AIZA,ACHA,AENA,ALeA;AMjBA,Ad0CA,AMlBA,AIZA,ACHA,AENA,ALeA;AMjBA,Ad0CA,AU9BA,ACHA,AENA,ALeA;AMjBA,Ad0CA,AU9BA,ACHA,AENA,ALeA;AMjBA,Ad0CA,AU9BA,ACHA,AENA,ALeA;AMjBA,Ad0CA,AU9BA,ACHA,AENA,ALeA;AMjBA,Ad0CA,AU9BA,ACHA,AENA,ALeA;AMjBA,Ad0CA,AU9BA,ACHA,AENA,ALeA;AMjBA,Ad0CA,AU9BA,ACHA,AENA,ALeA;AMjBA,Ad0CA,AU9BA,ACHA,AENA,ALeA;AMjBA,Ad0CA,AU9BA,ACHA,AENA,ALeA;AMjBA,Ad0CA,AU9BA,ACHA,AENA,ALeA;AMjBA,Ad0CA,AU9BA,ACHA,AENA,ALeA;AMjBA,Ad0CA,AU9BA,ACHA,AENA,ALeA;AMjBA,Ad0CA,AU9BA,ACHA,AENA,ALeA;AMjBA,Ad0CA,AU9BA,ACHA,AENA,ALeA;AMjBA,Ad0CA,AU9BA,ACHA,AENA,ALeA;ARyBA,AU9BA,ACHA,AENA,ALeA;ARyBA,AU9BA,ACHA,AENA,ALeA;ARyBA,AU9BA,ACHA,AENA,ALeA;ARyBA,AU9BA,ACHA,AENA,ALeA;ARyBA,AU9BA,ACHA,AENA,ALeA;ARyBA,AU9BA,ACHA,AENA,ALeA;ARyBA,AU9BA,ACHA,AENA,ALeA;ARyBA,AU9BA,ACHA,AENA,ALeA;ARyBA,AU9BA,ACHA,AENA,ALeA;ARyBA,AU9BA,ACHA,AENA,ALeA;ARyBA,AU9BA,ACHA,AENA,ALeA;ARyBA,AU9BA,ACHA,AENA,ALeA;ARyBA,AU9BA,ACHA,AENA,ALeA;ARyBA,AU9BA,ACHA,AENA,ALeA;ARyBA,AU9BA,ACHA,AENA,ALeA;ARyBA,AU9BA,ACHA,AENA,ALeA;ARyBA,AU9BA,ACHA,AENA,ALeA;ARyBA,AU9BA,ACHA,AENA,ALeA;ARyBA,AU9BA,ACHA,AENA,ALeA;ARyBA,AU9BA,ACHA,AENA,ALeA;ARyBA,AU9BA,ACHA,AENA,ALeA;ARyBA,AU9BA,ACHA,AENA,ALeA;ARyBA,AU9BA,ACHA,AENA,ALeA;ARyBA,AU9BA,ACHA,AENA,ALeA;ARyBA,AU9BA,ACHA,AENA,ALeA;ARyBA,AU9BA,ACHA,AENA,ALeA;ARyBA,AU9BA,ACHA,AENA,ALeA;ARyBA,AU9BA,ACHA,AENA,ALeA;ARyBA,AU9BA,ACHA,AENA,ALeA;ARyBA,AU9BA,ACHA,AENA,ALeA;ARyBA,AU9BA,ACHA,AENA,ALeA;ARyBA,AU9BA,ACHA,AENA,ALeA;ARyBA,AU9BA,ACHA,AENA,ALeA;ARyBA,AU9BA,ACHA,AENA,ALeA;ARyBA,AU9BA,ACHA,AENA,ALeA;ARyBA,AU9BA,ACHA,AENA;AbwCA,AU9BA,ACHA,AENA;AbwCA,AU9BA,ACHA,AENA;AbwCA,AU9BA,ACHA,AENA;AbwCA,AU9BA,ACHA,AENA;AbwCA,AU9BA,ACHA,AENA;AbwCA,AU9BA,ACHA,AENA;AbwCA,AU9BA,ACHA,AENA;AbwCA,AU9BA,ACHA,AENA;AbwCA,AU9BA,ACHA,AENA;AbwCA,AU9BA,ACHA,AENA;AbwCA,AU9BA,ACHA,AENA;AbwCA,AU9BA,ACHA,AENA;AbwCA,AU9BA,ACHA,AENA;AbwCA,AU9BA,ACHA,AENA;AbwCA,AU9BA,ACHA,AENA;AbwCA,AU9BA,ACHA,AENA;AbwCA,AU9BA,ACHA,AENA;AbwCA,AU9BA,ACHA,AENA;AbwCA,AU9BA,ACHA,AENA;AbwCA,AU9BA,ACHA,AENA;AbwCA,AU9BA,ACHA,AENA;AbwCA,AU9BA,ACHA,AENA;AbwCA,AU9BA,ACHA,AENA;AbwCA,AU9BA,ACHA,AENA;AbwCA,AU9BA,ACHA,AENA;AbwCA,AU9BA,ACHA,AENA;AbwCA,AU9BA,ACHA,AENA;AbwCA,AU9BA,ACHA,AENA;AbwCA,AU9BA,ACHA,AENA;AbwCA,AU9BA,ACHA,AENA;AbwCA,AU9BA,ACHA,AENA;AbwCA,AU9BA,ACHA,AENA;AbwCA,AU9BA,ACHA,AENA;AbwCA,AU9BA,ACHA,AENA;AbwCA,AU9BA,ACHA,AENA;AbwCA,AU9BA,ACHA,AENA;AbwCA,AU9BA,ACHA,AENA;AbwCA,AU9BA,ACHA,AENA;AbwCA,AU9BA,ACHA,AENA;AbwCA,AU9BA,ACHA,AENA;AbwCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkCA,AU9BA,ACHA;AXkfile":"index.js","sourcesContent":["var csstree = require('css-tree');\nvar parse = csstree.parse;\nvar compress = require('./compress');\nvar generate = csstree.generate;\n\nfunction debugOutput(name, options, startTime, data) {\n    if (options.debug) {\n        console.error('## ' + name + ' done in %d ms\\n', Date.now() - startTime);\n    }\n\n    return data;\n}\n\nfunction createDefaultLogger(level) {\n    var lastDebug;\n\n    return function logger(title, ast) {\n        var line = title;\n\n        if (ast) {\n            line = '[' + ((Date.now() - lastDebug) / 1000).toFixed(3) + 's] ' + line;\n        }\n\n        if (level > 1 && ast) {\n            var css = generate(ast);\n\n            // when level 2, limit css to 256 symbols\n            if (level === 2 && css.length > 256) {\n                css = css.substr(0, 256) + '...';\n            }\n\n            line += '\\n  ' + css + '\\n';\n        }\n\n        console.error(line);\n        lastDebug = Date.now();\n    };\n}\n\nfunction copy(obj) {\n    var result = {};\n\n    for (var key in obj) {\n        result[key] = obj[key];\n    }\n\n    return result;\n}\n\nfunction buildCompressOptions(options) {\n    options = copy(options);\n\n    if (typeof options.logger !== 'function' && options.debug) {\n        options.logger = createDefaultLogger(options.debug);\n    }\n\n    return options;\n}\n\nfunction runHandler(ast, options, handlers) {\n    if (!Array.isArray(handlers)) {\n        handlers = [handlers];\n    }\n\n    handlers.forEach(function(fn) {\n        fn(ast, options);\n    });\n}\n\nfunction minify(context, source, options) {\n    options = options || {};\n\n    var filename = options.filename || '<unknown>';\n    var result;\n\n    // parse\n    var ast = debugOutput('parsing', options, Date.now(),\n        parse(source, {\n            context: context,\n            filename: filename,\n            positions: Boolean(options.sourceMap)\n        })\n    );\n\n    // before compress handlers\n    if (options.beforeCompress) {\n        debugOutput('beforeCompress', options, Date.now(),\n            runHandler(ast, options, options.beforeCompress)\n        );\n    }\n\n    // compress\n    var compressResult = debugOutput('compress', options, Date.now(),\n        compress(ast, buildCompressOptions(options))\n    );\n\n    // after compress handlers\n    if (options.afterCompress) {\n        debugOutput('afterCompress', options, Date.now(),\n            runHandler(compressResult, options, options.afterCompress)\n        );\n    }\n\n    // generate\n    if (options.sourceMap) {\n        result = debugOutput('generate(sourceMap: true)', options, Date.now(), (function() {\n            var tmp = generate(compressResult.ast, { sourceMap: true });\n            tmp.map._file = filename; // since other tools can relay on file in source map transform chain\n            tmp.map.setSourceContent(filename, source);\n            return tmp;\n        }()));\n    } else {\n        result = debugOutput('generate', options, Date.now(), {\n            css: generate(compressResult.ast),\n            map: null\n        });\n    }\n\n    return result;\n}\n\nfunction minifyStylesheet(source, options) {\n    return minify('stylesheet', source, options);\n}\n\nfunction minifyBlock(source, options) {\n    return minify('declarationList', source, options);\n}\n\nmodule.exports = {\n    version: require('../package.json').version,\n\n    // main methods\n    minify: minifyStylesheet,\n    minifyBlock: minifyBlock,\n\n    // css syntax parser/walkers/generator/etc\n    syntax: Object.assign({\n        compress: compress\n    }, csstree)\n};\n","var List = require('css-tree').List;\nvar clone = require('css-tree').clone;\nvar usageUtils = require('./usage');\nvar clean = require('./clean');\nvar replace = require('./replace');\nvar restructure = require('./restructure');\nvar walk = require('css-tree').walk;\n\nfunction readChunk(children, specialComments) {\n    var buffer = new List();\n    var nonSpaceTokenInBuffer = false;\n    var protectedComment;\n\n    children.nextUntil(children.head, function(node, item, list) {\n        if (node.type === 'Comment') {\n            if (!specialComments || node.value.charAt(0) !== '!') {\n                list.remove(item);\n                return;\n            }\n\n            if (nonSpaceTokenInBuffer || protectedComment) {\n                return true;\n            }\n\n            list.remove(item);\n            protectedComment = node;\n            return;\n        }\n\n        if (node.type !== 'WhiteSpace') {\n            nonSpaceTokenInBuffer = true;\n        }\n\n        buffer.insert(list.remove(item));\n    });\n\n    return {\n        comment: protectedComment,\n        stylesheet: {\n            type: 'StyleSheet',\n            loc: null,\n            children: buffer\n        }\n    };\n}\n\nfunction compressChunk(ast, firstAtrulesAllowed, num, options) {\n    options.logger('Compress block #' + num, null, true);\n\n    var seed = 1;\n\n    if (ast.type === 'StyleSheet') {\n        ast.firstAtrulesAllowed = firstAtrulesAllowed;\n        ast.id = seed++;\n    }\n\n    walk(ast, {\n        visit: 'Atrule',\n        enter: function markScopes(node) {\n            if (node.block !== null) {\n                node.block.id = seed++;\n            }\n        }\n    });\n    options.logger('init', ast);\n\n    // remove redundant\n    clean(ast, options);\n    options.logger('clean', ast);\n\n    // replace nodes for shortened forms\n    replace(ast, options);\n    options.logger('replace', ast);\n\n    // structure optimisations\n    if (options.restructuring) {\n        restructure(ast, options);\n    }\n\n    return ast;\n}\n\nfunction getCommentsOption(options) {\n    var comments = 'comments' in options ? options.comments : 'exclamation';\n\n    if (typeof comments === 'boolean') {\n        comments = comments ? 'exclamation' : false;\n    } else if (comments !== 'exclamation' && comments !== 'first-exclamation') {\n        comments = false;\n    }\n\n    return comments;\n}\n\nfunction getRestructureOption(options) {\n    if ('restructure' in options) {\n        return options.restructure;\n    }\n\n    return 'restructuring' in options ? options.restructuring : true;\n}\n\nfunction wrapBlock(block) {\n    return new List().appendData({\n        type: 'Rule',\n        loc: null,\n        prelude: {\n            type: 'SelectorList',\n            loc: null,\n            children: new List().appendData({\n                type: 'Selector',\n                loc: null,\n                children: new List().appendData({\n                    type: 'TypeSelector',\n                    loc: null,\n                    name: 'x'\n                })\n            })\n        },\n        block: block\n    });\n}\n\nmodule.exports = function compress(ast, options) {\n    ast = ast || { type: 'StyleSheet', loc: null, children: new List() };\n    options = options || {};\n\n    var compressOptions = {\n        logger: typeof options.logger === 'function' ? options.logger : function() {},\n        restructuring: getRestructureOption(options),\n        forceMediaMerge: Boolean(options.forceMediaMerge),\n        usage: options.usage ? usageUtils.buildIndex(options.usage) : false\n    };\n    var specialComments = getCommentsOption(options);\n    var firstAtrulesAllowed = true;\n    var input;\n    var output = new List();\n    var chunk;\n    var chunkNum = 1;\n    var chunkChildren;\n\n    if (options.clone) {\n        ast = clone(ast);\n    }\n\n    if (ast.type === 'StyleSheet') {\n        input = ast.children;\n        ast.children = output;\n    } else {\n        input = wrapBlock(ast);\n    }\n\n    do {\n        chunk = readChunk(input, Boolean(specialComments));\n        compressChunk(chunk.stylesheet, firstAtrulesAllowed, chunkNum++, compressOptions);\n        chunkChildren = chunk.stylesheet.children;\n\n        if (chunk.comment) {\n            // add \\n before comment if there is another content in output\n            if (!output.isEmpty()) {\n                output.insert(List.createItem({\n                    type: 'Raw',\n                    value: '\\n'\n                }));\n            }\n\n            output.insert(List.createItem(chunk.comment));\n\n            // add \\n after comment if chunk is not empty\n            if (!chunkChildren.isEmpty()) {\n                output.insert(List.createItem({\n                    type: 'Raw',\n                    value: '\\n'\n                }));\n            }\n        }\n\n        if (firstAtrulesAllowed && !chunkChildren.isEmpty()) {\n            var lastRule = chunkChildren.last();\n\n            if (lastRule.type !== 'Atrule' ||\n               (lastRule.name !== 'import' && lastRule.name !== 'charset')) {\n                firstAtrulesAllowed = false;\n            }\n        }\n\n        if (specialComments !== 'exclamation') {\n            specialComments = false;\n        }\n\n        output.appendList(chunkChildren);\n    } while (!input.isEmpty());\n\n    return {\n        ast: ast\n    };\n};\n","var hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction buildMap(list, caseInsensitive) {\n    var map = Object.create(null);\n\n    if (!Array.isArray(list)) {\n        return null;\n    }\n\n    for (var i = 0; i < list.length; i++) {\n        var name = list[i];\n\n        if (caseInsensitive) {\n            name = name.toLowerCase();\n        }\n\n        map[name] = true;\n    }\n\n    return map;\n}\n\nfunction buildList(data) {\n    if (!data) {\n        return null;\n    }\n\n    var tags = buildMap(data.tags, true);\n    var ids = buildMap(data.ids);\n    var classes = buildMap(data.classes);\n\n    if (tags === null &&\n        ids === null &&\n        classes === null) {\n        return null;\n    }\n\n    return {\n        tags: tags,\n        ids: ids,\n        classes: classes\n    };\n}\n\nfunction buildIndex(data) {\n    var scopes = false;\n\n    if (data.scopes && Array.isArray(data.scopes)) {\n        scopes = Object.create(null);\n\n        for (var i = 0; i < data.scopes.length; i++) {\n            var list = data.scopes[i];\n\n            if (!list || !Array.isArray(list)) {\n                throw new Error('Wrong usage format');\n            }\n\n            for (var j = 0; j < list.length; j++) {\n                var name = list[j];\n\n                if (hasOwnProperty.call(scopes, name)) {\n                    throw new Error('Class can\\'t be used for several scopes: ' + name);\n                }\n\n                scopes[name] = i + 1;\n            }\n        }\n    }\n\n    return {\n        whitelist: buildList(data),\n        blacklist: buildList(data.blacklist),\n        scopes: scopes\n    };\n}\n\nmodule.exports = {\n    buildIndex: buildIndex\n};\n","var walk = require('css-tree').walk;\nvar handlers = {\n    Atrule: require('./Atrule'),\n    Comment: require('./Comment'),\n    Declaration: require('./Declaration'),\n    Raw: require('./Raw'),\n    Rule: require('./Rule'),\n    TypeSelector: require('./TypeSelector'),\n    WhiteSpace: require('./WhiteSpace')\n};\n\nmodule.exports = function(ast, options) {\n    walk(ast, {\n        leave: function(node, item, list) {\n            if (handlers.hasOwnProperty(node.type)) {\n                handlers[node.type].call(this, node, item, list, options);\n            }\n        }\n    });\n};\n","var resolveKeyword = require('css-tree').keyword;\nvar { hasNoChildren } = require('./utils');\n\nmodule.exports = function cleanAtrule(node, item, list) {\n    if (node.block) {\n        // otherwise removed at-rule don't prevent @import for removal\n        if (this.stylesheet !== null) {\n            this.stylesheet.firstAtrulesAllowed = false;\n        }\n\n        if (hasNoChildren(node.block)) {\n            list.remove(item);\n            return;\n        }\n    }\n\n    switch (node.name) {\n        case 'charset':\n            if (hasNoChildren(node.prelude)) {\n                list.remove(item);\n                return;\n            }\n\n            // if there is any rule before @charset -> remove it\n            if (item.prev) {\n                list.remove(item);\n                return;\n            }\n\n            break;\n\n        case 'import':\n            if (this.stylesheet === null || !this.stylesheet.firstAtrulesAllowed) {\n                list.remove(item);\n                return;\n            }\n\n            // if there are some rules that not an @import or @charset before @import\n            // remove it\n            list.prevUntil(item.prev, function(rule) {\n                if (rule.type === 'Atrule') {\n                    if (rule.name === 'import' || rule.name === 'charset') {\n                        return;\n                    }\n                }\n\n                this.root.firstAtrulesAllowed = false;\n                list.remove(item);\n                return true;\n            }, this);\n\n            break;\n\n        default:\n            var name = resolveKeyword(node.name).basename;\n            if (name === 'keyframes' ||\n                name === 'media' ||\n                name === 'supports') {\n\n                // drop at-rule with no prelude\n                if (hasNoChildren(node.prelude) || hasNoChildren(node.block)) {\n                    list.remove(item);\n                }\n            }\n    }\n};\n","module.exports = {\n    hasNoChildren: function(node) {\n        return !node || !node.children || node.children.isEmpty();\n    },\n    isNodeChildrenList: function(node, list) {\n        return node !== null && node.children === list;\n    }\n};\n","module.exports = function cleanComment(data, item, list) {\n    list.remove(item);\n};\n","module.exports = function cleanDeclartion(node, item, list) {\n    if (node.value.children && node.value.children.isEmpty()) {\n        list.remove(item);\n    }\n};\n","var { isNodeChildrenList } = require('./utils');\n\nmodule.exports = function cleanRaw(node, item, list) {\n    // raw in stylesheet or block children\n    if (isNodeChildrenList(this.stylesheet, list) ||\n        isNodeChildrenList(this.block, list)) {\n        list.remove(item);\n    }\n};\n","var hasOwnProperty = Object.prototype.hasOwnProperty;\nvar walk = require('css-tree').walk;\nvar { hasNoChildren } = require('./utils');\n\nfunction cleanUnused(selectorList, usageData) {\n    selectorList.children.each(function(selector, item, list) {\n        var shouldRemove = false;\n\n        walk(selector, function(node) {\n            // ignore nodes in nested selectors\n            if (this.selector === null || this.selector === selectorList) {\n                switch (node.type) {\n                    case 'SelectorList':\n                        // TODO: remove toLowerCase when pseudo selectors will be normalized\n                        // ignore selectors inside :not()\n                        if (this.function === null || this.function.name.toLowerCase() !== 'not') {\n                            if (cleanUnused(node, usageData)) {\n                                shouldRemove = true;\n                            }\n                        }\n                        break;\n\n                    case 'ClassSelector':\n                        if (usageData.whitelist !== null &&\n                            usageData.whitelist.classes !== null &&\n                            !hasOwnProperty.call(usageData.whitelist.classes, node.name)) {\n                            shouldRemove = true;\n                        }\n                        if (usageData.blacklist !== null &&\n                            usageData.blacklist.classes !== null &&\n                            hasOwnProperty.call(usageData.blacklist.classes, node.name)) {\n                            shouldRemove = true;\n                        }\n                        break;\n\n                    case 'IdSelector':\n                        if (usageData.whitelist !== null &&\n                            usageData.whitelist.ids !== null &&\n                            !hasOwnProperty.call(usageData.whitelist.ids, node.name)) {\n                            shouldRemove = true;\n                        }\n                        if (usageData.blacklist !== null &&\n                            usageData.blacklist.ids !== null &&\n                            hasOwnProperty.call(usageData.blacklist.ids, node.name)) {\n                            shouldRemove = true;\n                        }\n                        break;\n\n                    case 'TypeSelector':\n                        // TODO: remove toLowerCase when type selectors will be normalized\n                        // ignore universal selectors\n                        if (node.name.charAt(node.name.length - 1) !== '*') {\n                            if (usageData.whitelist !== null &&\n                                usageData.whitelist.tags !== null &&\n                                !hasOwnProperty.call(usageData.whitelist.tags, node.name.toLowerCase())) {\n                                shouldRemove = true;\n                            }\n                            if (usageData.blacklist !== null &&\n                                usageData.blacklist.tags !== null &&\n                                hasOwnProperty.call(usageData.blacklist.tags, node.name.toLowerCase())) {\n                                shouldRemove = true;\n                            }\n                        }\n                        break;\n                }\n            }\n        });\n\n        if (shouldRemove) {\n            list.remove(item);\n        }\n    });\n\n    return selectorList.children.isEmpty();\n}\n\nmodule.exports = function cleanRule(node, item, list, options) {\n    if (hasNoChildren(node.prelude) || hasNoChildren(node.block)) {\n        list.remove(item);\n        return;\n    }\n\n    var usageData = options.usage;\n\n    if (usageData && (usageData.whitelist !== null || usageData.blacklist !== null)) {\n        cleanUnused(node.prelude, usageData);\n\n        if (hasNoChildren(node.prelude)) {\n            list.remove(item);\n            return;\n        }\n    }\n};\n","// remove useless universal selector\nmodule.exports = function cleanTypeSelector(node, item, list) {\n    var name = item.data.name;\n\n    // check it's a non-namespaced universal selector\n    if (name !== '*') {\n        return;\n    }\n\n    // remove when universal selector before other selectors\n    var nextType = item.next && item.next.data.type;\n    if (nextType === 'IdSelector' ||\n        nextType === 'ClassSelector' ||\n        nextType === 'AttributeSelector' ||\n        nextType === 'PseudoClassSelector' ||\n        nextType === 'PseudoElementSelector') {\n        list.remove(item);\n    }\n};\n","var { isNodeChildrenList } = require('./utils');\n\nfunction isSafeOperator(node) {\n    return node.type === 'Operator' && node.value !== '+' && node.value !== '-';\n}\n\nmodule.exports = function cleanWhitespace(node, item, list) {\n    // remove when first or last item in sequence\n    if (item.next === null || item.prev === null) {\n        list.remove(item);\n        return;\n    }\n\n    // white space in stylesheet or block children\n    if (isNodeChildrenList(this.stylesheet, list) ||\n        isNodeChildrenList(this.block, list)) {\n        list.remove(item);\n        return;\n    }\n\n    if (item.next.data.type === 'WhiteSpace') {\n        list.remove(item);\n        return;\n    }\n\n    if (isSafeOperator(item.prev.data) || isSafeOperator(item.next.data)) {\n        list.remove(item);\n        return;\n    }\n};\n","var walk = require('css-tree').walk;\nvar handlers = {\n    Atrule: require('./Atrule'),\n    AttributeSelector: require('./AttributeSelector'),\n    Value: require('./Value'),\n    Dimension: require('./Dimension'),\n    Percentage: require('./Percentage'),\n    Number: require('./Number'),\n    String: require('./String'),\n    Url: require('./Url'),\n    HexColor: require('./color').compressHex,\n    Identifier: require('./color').compressIdent,\n    Function: require('./color').compressFunction\n};\n\nmodule.exports = function(ast) {\n    walk(ast, {\n        leave: function(node, item, list) {\n            if (handlers.hasOwnProperty(node.type)) {\n                handlers[node.type].call(this, node, item, list);\n            }\n        }\n    });\n};\n","var resolveKeyword = require('css-tree').keyword;\nvar compressKeyframes = require('./atrule/keyframes');\n\nmodule.exports = function(node) {\n    // compress @keyframe selectors\n    if (resolveKeyword(node.name).basename === 'keyframes') {\n        compressKeyframes(node);\n    }\n};\n","module.exports = function(node) {\n    node.block.children.each(function(rule) {\n        rule.prelude.children.each(function(simpleselector) {\n            simpleselector.children.each(function(data, item) {\n                if (data.type === 'Percentage' && data.value === '100') {\n                    item.data = {\n                        type: 'TypeSelector',\n                        loc: data.loc,\n                        name: 'to'\n                    };\n                } else if (data.type === 'TypeSelector' && data.name === 'from') {\n                    item.data = {\n                        type: 'Percentage',\n                        loc: data.loc,\n                        value: '0'\n                    };\n                }\n            });\n        });\n    });\n};\n","// Can unquote attribute detection\n// Adopted implementation of Mathias Bynens\n// https://github.com/mathiasbynens/mothereff.in/blob/master/unquoted-attributes/eff.js\nvar escapesRx = /\\\\([0-9A-Fa-f]{1,6})(\\r\\n|[ \\t\\n\\f\\r])?|\\\\./g;\nvar blockUnquoteRx = /^(-?\\d|--)|[\\u0000-\\u002c\\u002e\\u002f\\u003A-\\u0040\\u005B-\\u005E\\u0060\\u007B-\\u009f]/;\n\nfunction canUnquote(value) {\n    if (value === '' || value === '-') {\n        return;\n    }\n\n    // Escapes are valid, so replace them with a valid non-empty string\n    value = value.replace(escapesRx, 'a');\n\n    return !blockUnquoteRx.test(value);\n}\n\nmodule.exports = function(node) {\n    var attrValue = node.value;\n\n    if (!attrValue || attrValue.type !== 'String') {\n        return;\n    }\n\n    var unquotedValue = attrValue.value.replace(/^(.)(.*)\\1$/, '$2');\n    if (canUnquote(unquotedValue)) {\n        node.value = {\n            type: 'Identifier',\n            loc: attrValue.loc,\n            name: unquotedValue\n        };\n    }\n};\n","var resolveName = require('css-tree').property;\nvar handlers = {\n    'font': require('./property/font'),\n    'font-weight': require('./property/font-weight'),\n    'background': require('./property/background'),\n    'border': require('./property/border'),\n    'outline': require('./property/border')\n};\n\nmodule.exports = function compressValue(node) {\n    if (!this.declaration) {\n        return;\n    }\n\n    var property = resolveName(this.declaration.property);\n\n    if (handlers.hasOwnProperty(property.basename)) {\n        handlers[property.basename](node);\n    }\n};\n","module.exports = function compressFont(node) {\n    var list = node.children;\n\n    list.eachRight(function(node, item) {\n        if (node.type === 'Identifier') {\n            if (node.name === 'bold') {\n                item.data = {\n                    type: 'Number',\n                    loc: node.loc,\n                    value: '700'\n                };\n            } else if (node.name === 'normal') {\n                var prev = item.prev;\n\n                if (prev && prev.data.type === 'Operator' && prev.data.value === '/') {\n                    this.remove(prev);\n                }\n\n                this.remove(item);\n            } else if (node.name === 'medium') {\n                var next = item.next;\n\n                if (!next || next.data.type !== 'Operator') {\n                    this.remove(item);\n                }\n            }\n        }\n    });\n\n    // remove redundant spaces\n    list.each(function(node, item) {\n        if (node.type === 'WhiteSpace') {\n            if (!item.prev || !item.next || item.next.data.type === 'WhiteSpace') {\n                this.remove(item);\n            }\n        }\n    });\n\n    if (list.isEmpty()) {\n        list.insert(list.createItem({\n            type: 'Identifier',\n            name: 'normal'\n        }));\n    }\n};\n","module.exports = function compressFontWeight(node) {\n    var value = node.children.head.data;\n\n    if (value.type === 'Identifier') {\n        switch (value.name) {\n            case 'normal':\n                node.children.head.data = {\n                    type: 'Number',\n                    loc: value.loc,\n                    value: '400'\n                };\n                break;\n            case 'bold':\n                node.children.head.data = {\n                    type: 'Number',\n                    loc: value.loc,\n                    value: '700'\n                };\n                break;\n        }\n    }\n};\n","var List = require('css-tree').List;\n\nmodule.exports = function compressBackground(node) {\n    function lastType() {\n        if (buffer.length) {\n            return buffer[buffer.length - 1].type;\n        }\n    }\n\n    function flush() {\n        if (lastType() === 'WhiteSpace') {\n            buffer.pop();\n        }\n\n        if (!buffer.length) {\n            buffer.unshift(\n                {\n                    type: 'Number',\n                    loc: null,\n                    value: '0'\n                },\n                {\n                    type: 'WhiteSpace',\n                    value: ' '\n                },\n                {\n                    type: 'Number',\n                    loc: null,\n                    value: '0'\n                }\n            );\n        }\n\n        newValue.push.apply(newValue, buffer);\n\n        buffer = [];\n    }\n\n    var newValue = [];\n    var buffer = [];\n\n    node.children.each(function(node) {\n        if (node.type === 'Operator' && node.value === ',') {\n            flush();\n            newValue.push(node);\n            return;\n        }\n\n        // remove defaults\n        if (node.type === 'Identifier') {\n            if (node.name === 'transparent' ||\n                node.name === 'none' ||\n                node.name === 'repeat' ||\n                node.name === 'scroll') {\n                return;\n            }\n        }\n\n        // don't add redundant spaces\n        if (node.type === 'WhiteSpace' && (!buffer.length || lastType() === 'WhiteSpace')) {\n            return;\n        }\n\n        buffer.push(node);\n    });\n\n    flush();\n    node.children = new List().fromArray(newValue);\n};\n","function removeItemAndRedundantWhiteSpace(list, item) {\n    var prev = item.prev;\n    var next = item.next;\n\n    if (next !== null) {\n        if (next.data.type === 'WhiteSpace' && (prev === null || prev.data.type === 'WhiteSpace')) {\n            list.remove(next);\n        }\n    } else if (prev !== null && prev.data.type === 'WhiteSpace') {\n        list.remove(prev);\n    }\n\n    list.remove(item);\n}\n\nmodule.exports = function compressBorder(node) {\n    node.children.each(function(node, item, list) {\n        if (node.type === 'Identifier' && node.name.toLowerCase() === 'none') {\n            if (list.head === list.tail) {\n                // replace `none` for zero when `none` is a single term\n                item.data = {\n                    type: 'Number',\n                    loc: node.loc,\n                    value: '0'\n                };\n            } else {\n                removeItemAndRedundantWhiteSpace(list, item);\n            }\n        }\n    });\n};\n","var packNumber = require('./Number').pack;\nvar LENGTH_UNIT = {\n    // absolute length units\n    'px': true,\n    'mm': true,\n    'cm': true,\n    'in': true,\n    'pt': true,\n    'pc': true,\n\n    // relative length units\n    'em': true,\n    'ex': true,\n    'ch': true,\n    'rem': true,\n\n    // viewport-percentage lengths\n    'vh': true,\n    'vw': true,\n    'vmin': true,\n    'vmax': true,\n    'vm': true\n};\n\nmodule.exports = function compressDimension(node, item) {\n    var value = packNumber(node.value, item);\n\n    node.value = value;\n\n    if (value === '0' && this.declaration !== null && this.atrulePrelude === null) {\n        var unit = node.unit.toLowerCase();\n\n        // only length values can be compressed\n        if (!LENGTH_UNIT.hasOwnProperty(unit)) {\n            return;\n        }\n\n        // issue #362: shouldn't remove unit in -ms-flex since it breaks flex in IE10/11\n        // issue #200: shouldn't remove unit in flex since it breaks flex in IE10/11\n        if (this.declaration.property === '-ms-flex' ||\n            this.declaration.property === 'flex') {\n            return;\n        }\n\n        // issue #222: don't remove units inside calc\n        if (this.function && this.function.name === 'calc') {\n            return;\n        }\n\n        item.data = {\n            type: 'Number',\n            loc: node.loc,\n            value: value\n        };\n    }\n};\n","var OMIT_PLUSSIGN = /^(?:\\+|(-))?0*(\\d*)(?:\\.0*|(\\.\\d*?)0*)?$/;\nvar KEEP_PLUSSIGN = /^([\\+\\-])?0*(\\d*)(?:\\.0*|(\\.\\d*?)0*)?$/;\nvar unsafeToRemovePlusSignAfter = {\n    Dimension: true,\n    HexColor: true,\n    Identifier: true,\n    Number: true,\n    Raw: true,\n    UnicodeRange: true\n};\n\nfunction packNumber(value, item) {\n    // omit plus sign only if no prev or prev is safe type\n    var regexp = item && item.prev !== null && unsafeToRemovePlusSignAfter.hasOwnProperty(item.prev.data.type)\n        ? KEEP_PLUSSIGN\n        : OMIT_PLUSSIGN;\n\n    // 100 -> '100'\n    // 00100 -> '100'\n    // +100 -> '100' (only when safe, e.g. omitting plus sign for 1px+1px leads to single dimension instead of two)\n    // -100 -> '-100'\n    // 0.123 -> '.123'\n    // 0.12300 -> '.123'\n    // 0.0 -> ''\n    // 0 -> ''\n    // -0 -> '-'\n    value = String(value).replace(regexp, '$1$2$3');\n\n    if (value === '' || value === '-') {\n        value = '0';\n    }\n\n    return value;\n}\n\nmodule.exports = function(node, item) {\n    node.value = packNumber(node.value, item);\n};\nmodule.exports.pack = packNumber;\n","var lexer = require('css-tree').lexer;\nvar packNumber = require('./Number').pack;\nvar blacklist = new Set([\n    // see https://github.com/jakubpawlowicz/clean-css/issues/957\n    'width',\n    'min-width',\n    'max-width',\n    'height',\n    'min-height',\n    'max-height',\n\n    // issue #410: Don’t remove units in flex-basis value for (-ms-)flex shorthand\n    // issue #362: shouldn't remove unit in -ms-flex since it breaks flex in IE10/11\n    // issue #200: shouldn't remove unit in flex since it breaks flex in IE10/11\n    'flex',\n    '-ms-flex'\n]);\n\nmodule.exports = function compressPercentage(node, item) {\n    node.value = packNumber(node.value, item);\n\n    if (node.value === '0' && this.declaration && !blacklist.has(this.declaration.property)) {\n        // try to convert a number\n        item.data = {\n            type: 'Number',\n            loc: node.loc,\n            value: node.value\n        };\n\n        // that's ok only when new value matches on length\n        if (!lexer.matchDeclaration(this.declaration).isType(item.data, 'length')) {\n            // otherwise rollback changes\n            item.data = node;\n        }\n    }\n};\n","module.exports = function(node) {\n    var value = node.value;\n\n    // remove escaped newlines, i.e.\n    // .a { content: \"foo\\\n    // bar\"}\n    // ->\n    // .a { content: \"foobar\" }\n    value = value.replace(/\\\\(\\r\\n|\\r|\\n|\\f)/g, '');\n\n    node.value = value;\n};\n","var UNICODE = '\\\\\\\\[0-9a-f]{1,6}(\\\\r\\\\n|[ \\\\n\\\\r\\\\t\\\\f])?';\nvar ESCAPE = '(' + UNICODE + '|\\\\\\\\[^\\\\n\\\\r\\\\f0-9a-fA-F])';\nvar NONPRINTABLE = '\\u0000\\u0008\\u000b\\u000e-\\u001f\\u007f';\nvar SAFE_URL = new RegExp('^(' + ESCAPE + '|[^\\\"\\'\\\\(\\\\)\\\\\\\\\\\\s' + NONPRINTABLE + '])*$', 'i');\n\nmodule.exports = function(node) {\n    var value = node.value;\n\n    if (value.type !== 'String') {\n        return;\n    }\n\n    var quote = value.value[0];\n    var url = value.value.substr(1, value.value.length - 2);\n\n    // convert `\\\\` to `/`\n    url = url.replace(/\\\\\\\\/g, '/');\n\n    // remove quotes when safe\n    // https://www.w3.org/TR/css-syntax-3/#url-unquoted-diagram\n    if (SAFE_URL.test(url)) {\n        node.value = {\n            type: 'Raw',\n            loc: node.value.loc,\n            value: url\n        };\n    } else {\n        // use double quotes if string has no double quotes\n        // otherwise use original quotes\n        // TODO: make better quote type selection\n        node.value.value = url.indexOf('\"') === -1 ? '\"' + url + '\"' : quote + url + quote;\n    }\n};\n","var lexer = require('css-tree').lexer;\nvar packNumber = require('./Number').pack;\n\n// http://www.w3.org/TR/css3-color/#svg-color\nvar NAME_TO_HEX = {\n    'aliceblue': 'f0f8ff',\n    'antiquewhite': 'faebd7',\n    'aqua': '0ff',\n    'aquamarine': '7fffd4',\n    'azure': 'f0ffff',\n    'beige': 'f5f5dc',\n    'bisque': 'ffe4c4',\n    'black': '000',\n    'blanchedalmond': 'ffebcd',\n    'blue': '00f',\n    'blueviolet': '8a2be2',\n    'brown': 'a52a2a',\n    'burlywood': 'deb887',\n    'cadetblue': '5f9ea0',\n    'chartreuse': '7fff00',\n    'chocolate': 'd2691e',\n    'coral': 'ff7f50',\n    'cornflowerblue': '6495ed',\n    'cornsilk': 'fff8dc',\n    'crimson': 'dc143c',\n    'cyan': '0ff',\n    'darkblue': '00008b',\n    'darkcyan': '008b8b',\n    'darkgoldenrod': 'b8860b',\n    'darkgray': 'a9a9a9',\n    'darkgrey': 'a9a9a9',\n    'darkgreen': '006400',\n    'darkkhaki': 'bdb76b',\n    'darkmagenta': '8b008b',\n    'darkolivegreen': '556b2f',\n    'darkorange': 'ff8c00',\n    'darkorchid': '9932cc',\n    'darkred': '8b0000',\n    'darksalmon': 'e9967a',\n    'darkseagreen': '8fbc8f',\n    'darkslateblue': '483d8b',\n    'darkslategray': '2f4f4f',\n    'darkslategrey': '2f4f4f',\n    'darkturquoise': '00ced1',\n    'darkviolet': '9400d3',\n    'deeppink': 'ff1493',\n    'deepskyblue': '00bfff',\n    'dimgray': '696969',\n    'dimgrey': '696969',\n    'dodgerblue': '1e90ff',\n    'firebrick': 'b22222',\n    'floralwhite': 'fffaf0',\n    'forestgreen': '228b22',\n    'fuchsia': 'f0f',\n    'gainsboro': 'dcdcdc',\n    'ghostwhite': 'f8f8ff',\n    'gold': 'ffd700',\n    'goldenrod': 'daa520',\n    'gray': '808080',\n    'grey': '808080',\n    'green': '008000',\n    'greenyellow': 'adff2f',\n    'honeydew': 'f0fff0',\n    'hotpink': 'ff69b4',\n    'indianred': 'cd5c5c',\n    'indigo': '4b0082',\n    'ivory': 'fffff0',\n    'khaki': 'f0e68c',\n    'lavender': 'e6e6fa',\n    'lavenderblush': 'fff0f5',\n    'lawngreen': '7cfc00',\n    'lemonchiffon': 'fffacd',\n    'lightblue': 'add8e6',\n    'lightcoral': 'f08080',\n    'lightcyan': 'e0ffff',\n    'lightgoldenrodyellow': 'fafad2',\n    'lightgray': 'd3d3d3',\n    'lightgrey': 'd3d3d3',\n    'lightgreen': '90ee90',\n    'lightpink': 'ffb6c1',\n    'lightsalmon': 'ffa07a',\n    'lightseagreen': '20b2aa',\n    'lightskyblue': '87cefa',\n    'lightslategray': '789',\n    'lightslategrey': '789',\n    'lightsteelblue': 'b0c4de',\n    'lightyellow': 'ffffe0',\n    'lime': '0f0',\n    'limegreen': '32cd32',\n    'linen': 'faf0e6',\n    'magenta': 'f0f',\n    'maroon': '800000',\n    'mediumaquamarine': '66cdaa',\n    'mediumblue': '0000cd',\n    'mediumorchid': 'ba55d3',\n    'mediumpurple': '9370db',\n    'mediumseagreen': '3cb371',\n    'mediumslateblue': '7b68ee',\n    'mediumspringgreen': '00fa9a',\n    'mediumturquoise': '48d1cc',\n    'mediumvioletred': 'c71585',\n    'midnightblue': '191970',\n    'mintcream': 'f5fffa',\n    'mistyrose': 'ffe4e1',\n    'moccasin': 'ffe4b5',\n    'navajowhite': 'ffdead',\n    'navy': '000080',\n    'oldlace': 'fdf5e6',\n    'olive': '808000',\n    'olivedrab': '6b8e23',\n    'orange': 'ffa500',\n    'orangered': 'ff4500',\n    'orchid': 'da70d6',\n    'palegoldenrod': 'eee8aa',\n    'palegreen': '98fb98',\n    'paleturquoise': 'afeeee',\n    'palevioletred': 'db7093',\n    'papayawhip': 'ffefd5',\n    'peachpuff': 'ffdab9',\n    'peru': 'cd853f',\n    'pink': 'ffc0cb',\n    'plum': 'dda0dd',\n    'powderblue': 'b0e0e6',\n    'purple': '800080',\n    'rebeccapurple': '639',\n    'red': 'f00',\n    'rosybrown': 'bc8f8f',\n    'royalblue': '4169e1',\n    'saddlebrown': '8b4513',\n    'salmon': 'fa8072',\n    'sandybrown': 'f4a460',\n    'seagreen': '2e8b57',\n    'seashell': 'fff5ee',\n    'sienna': 'a0522d',\n    'silver': 'c0c0c0',\n    'skyblue': '87ceeb',\n    'slateblue': '6a5acd',\n    'slategray': '708090',\n    'slategrey': '708090',\n    'snow': 'fffafa',\n    'springgreen': '00ff7f',\n    'steelblue': '4682b4',\n    'tan': 'd2b48c',\n    'teal': '008080',\n    'thistle': 'd8bfd8',\n    'tomato': 'ff6347',\n    'turquoise': '40e0d0',\n    'violet': 'ee82ee',\n    'wheat': 'f5deb3',\n    'white': 'fff',\n    'whitesmoke': 'f5f5f5',\n    'yellow': 'ff0',\n    'yellowgreen': '9acd32'\n};\n\nvar HEX_TO_NAME = {\n    '800000': 'maroon',\n    '800080': 'purple',\n    '808000': 'olive',\n    '808080': 'gray',\n    '00ffff': 'cyan',\n    'f0ffff': 'azure',\n    'f5f5dc': 'beige',\n    'ffe4c4': 'bisque',\n    '000000': 'black',\n    '0000ff': 'blue',\n    'a52a2a': 'brown',\n    'ff7f50': 'coral',\n    'ffd700': 'gold',\n    '008000': 'green',\n    '4b0082': 'indigo',\n    'fffff0': 'ivory',\n    'f0e68c': 'khaki',\n    '00ff00': 'lime',\n    'faf0e6': 'linen',\n    '000080': 'navy',\n    'ffa500': 'orange',\n    'da70d6': 'orchid',\n    'cd853f': 'peru',\n    'ffc0cb': 'pink',\n    'dda0dd': 'plum',\n    'f00': 'red',\n    'ff0000': 'red',\n    'fa8072': 'salmon',\n    'a0522d': 'sienna',\n    'c0c0c0': 'silver',\n    'fffafa': 'snow',\n    'd2b48c': 'tan',\n    '008080': 'teal',\n    'ff6347': 'tomato',\n    'ee82ee': 'violet',\n    'f5deb3': 'wheat',\n    'ffffff': 'white',\n    'ffff00': 'yellow'\n};\n\nfunction hueToRgb(p, q, t) {\n    if (t < 0) {\n        t += 1;\n    }\n    if (t > 1) {\n        t -= 1;\n    }\n    if (t < 1 / 6) {\n        return p + (q - p) * 6 * t;\n    }\n    if (t < 1 / 2) {\n        return q;\n    }\n    if (t < 2 / 3) {\n        return p + (q - p) * (2 / 3 - t) * 6;\n    }\n    return p;\n}\n\nfunction hslToRgb(h, s, l, a) {\n    var r;\n    var g;\n    var b;\n\n    if (s === 0) {\n        r = g = b = l; // achromatic\n    } else {\n        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        var p = 2 * l - q;\n\n        r = hueToRgb(p, q, h + 1 / 3);\n        g = hueToRgb(p, q, h);\n        b = hueToRgb(p, q, h - 1 / 3);\n    }\n\n    return [\n        Math.round(r * 255),\n        Math.round(g * 255),\n        Math.round(b * 255),\n        a\n    ];\n}\n\nfunction toHex(value) {\n    value = value.toString(16);\n    return value.length === 1 ? '0' + value : value;\n}\n\nfunction parseFunctionArgs(functionArgs, count, rgb) {\n    var cursor = functionArgs.head;\n    var args = [];\n    var wasValue = false;\n\n    while (cursor !== null) {\n        var node = cursor.data;\n        var type = node.type;\n\n        switch (type) {\n            case 'Number':\n            case 'Percentage':\n                if (wasValue) {\n                    return;\n                }\n\n                wasValue = true;\n                args.push({\n                    type: type,\n                    value: Number(node.value)\n                });\n                break;\n\n            case 'Operator':\n                if (node.value === ',') {\n                    if (!wasValue) {\n                        return;\n                    }\n                    wasValue = false;\n                } else if (wasValue || node.value !== '+') {\n                    return;\n                }\n                break;\n\n            default:\n                // something we couldn't understand\n                return;\n        }\n\n        cursor = cursor.next;\n    }\n\n    if (args.length !== count) {\n        // invalid arguments count\n        // TODO: remove those tokens\n        return;\n    }\n\n    if (args.length === 4) {\n        if (args[3].type !== 'Number') {\n            // 4th argument should be a number\n            // TODO: remove those tokens\n            return;\n        }\n\n        args[3].type = 'Alpha';\n    }\n\n    if (rgb) {\n        if (args[0].type !== args[1].type || args[0].type !== args[2].type) {\n            // invalid color, numbers and percentage shouldn't be mixed\n            // TODO: remove those tokens\n            return;\n        }\n    } else {\n        if (args[0].type !== 'Number' ||\n            args[1].type !== 'Percentage' ||\n            args[2].type !== 'Percentage') {\n            // invalid color, for hsl values should be: number, percentage, percentage\n            // TODO: remove those tokens\n            return;\n        }\n\n        args[0].type = 'Angle';\n    }\n\n    return args.map(function(arg) {\n        var value = Math.max(0, arg.value);\n\n        switch (arg.type) {\n            case 'Number':\n                // fit value to [0..255] range\n                value = Math.min(value, 255);\n                break;\n\n            case 'Percentage':\n                // convert 0..100% to value in [0..255] range\n                value = Math.min(value, 100) / 100;\n\n                if (!rgb) {\n                    return value;\n                }\n\n                value = 255 * value;\n                break;\n\n            case 'Angle':\n                // fit value to (-360..360) range\n                return (((value % 360) + 360) % 360) / 360;\n\n            case 'Alpha':\n                // fit value to [0..1] range\n                return Math.min(value, 1);\n        }\n\n        return Math.round(value);\n    });\n}\n\nfunction compressFunction(node, item, list) {\n    var functionName = node.name;\n    var args;\n\n    if (functionName === 'rgba' || functionName === 'hsla') {\n        args = parseFunctionArgs(node.children, 4, functionName === 'rgba');\n\n        if (!args) {\n            // something went wrong\n            return;\n        }\n\n        if (functionName === 'hsla') {\n            args = hslToRgb.apply(null, args);\n            node.name = 'rgba';\n        }\n\n        if (args[3] === 0) {\n            // try to replace `rgba(x, x, x, 0)` to `transparent`\n            // always replace `rgba(0, 0, 0, 0)` to `transparent`\n            // otherwise avoid replacement in gradients since it may break color transition\n            // http://stackoverflow.com/questions/11829410/css3-gradient-rendering-issues-from-transparent-to-white\n            var scopeFunctionName = this.function && this.function.name;\n            if ((args[0] === 0 && args[1] === 0 && args[2] === 0) ||\n                !/^(?:to|from|color-stop)$|gradient$/i.test(scopeFunctionName)) {\n\n                item.data = {\n                    type: 'Identifier',\n                    loc: node.loc,\n                    name: 'transparent'\n                };\n\n                return;\n            }\n        }\n\n        if (args[3] !== 1) {\n            // replace argument values for normalized/interpolated\n            node.children.each(function(node, item, list) {\n                if (node.type === 'Operator') {\n                    if (node.value !== ',') {\n                        list.remove(item);\n                    }\n                    return;\n                }\n\n                item.data = {\n                    type: 'Number',\n                    loc: node.loc,\n                    value: packNumber(args.shift(), null)\n                };\n            });\n\n            return;\n        }\n\n        // otherwise convert to rgb, i.e. rgba(255, 0, 0, 1) -> rgb(255, 0, 0)\n        functionName = 'rgb';\n    }\n\n    if (functionName === 'hsl') {\n        args = args || parseFunctionArgs(node.children, 3, false);\n\n        if (!args) {\n            // something went wrong\n            return;\n        }\n\n        // convert to rgb\n        args = hslToRgb.apply(null, args);\n        functionName = 'rgb';\n    }\n\n    if (functionName === 'rgb') {\n        args = args || parseFunctionArgs(node.children, 3, true);\n\n        if (!args) {\n            // something went wrong\n            return;\n        }\n\n        // check if color is not at the end and not followed by space\n        var next = item.next;\n        if (next && next.data.type !== 'WhiteSpace') {\n            list.insert(list.createItem({\n                type: 'WhiteSpace',\n                value: ' '\n            }), next);\n        }\n\n        item.data = {\n            type: 'HexColor',\n            loc: node.loc,\n            value: toHex(args[0]) + toHex(args[1]) + toHex(args[2])\n        };\n\n        compressHex(item.data, item);\n    }\n}\n\nfunction compressIdent(node, item) {\n    if (this.declaration === null) {\n        return;\n    }\n\n    var color = node.name.toLowerCase();\n\n    if (NAME_TO_HEX.hasOwnProperty(color) &&\n        lexer.matchDeclaration(this.declaration).isType(node, 'color')) {\n        var hex = NAME_TO_HEX[color];\n\n        if (hex.length + 1 <= color.length) {\n            // replace for shorter hex value\n            item.data = {\n                type: 'HexColor',\n                loc: node.loc,\n                value: hex\n            };\n        } else {\n            // special case for consistent colors\n            if (color === 'grey') {\n                color = 'gray';\n            }\n\n            // just replace value for lower cased name\n            node.name = color;\n        }\n    }\n}\n\nfunction compressHex(node, item) {\n    var color = node.value.toLowerCase();\n\n    // #112233 -> #123\n    if (color.length === 6 &&\n        color[0] === color[1] &&\n        color[2] === color[3] &&\n        color[4] === color[5]) {\n        color = color[0] + color[2] + color[4];\n    }\n\n    if (HEX_TO_NAME[color]) {\n        item.data = {\n            type: 'Identifier',\n            loc: node.loc,\n            name: HEX_TO_NAME[color]\n        };\n    } else {\n        node.value = color;\n    }\n}\n\nmodule.exports = {\n    compressFunction: compressFunction,\n    compressIdent: compressIdent,\n    compressHex: compressHex\n};\n","var prepare = require('./prepare/index');\nvar mergeAtrule = require('./1-mergeAtrule');\nvar initialMergeRuleset = require('./2-initialMergeRuleset');\nvar disjoinRuleset = require('./3-disjoinRuleset');\nvar restructShorthand = require('./4-restructShorthand');\nvar restructBlock = require('./6-restructBlock');\nvar mergeRuleset = require('./7-mergeRuleset');\nvar restructRuleset = require('./8-restructRuleset');\n\nmodule.exports = function(ast, options) {\n    // prepare ast for restructing\n    var indexer = prepare(ast, options);\n    options.logger('prepare', ast);\n\n    mergeAtrule(ast, options);\n    options.logger('mergeAtrule', ast);\n\n    initialMergeRuleset(ast);\n    options.logger('initialMergeRuleset', ast);\n\n    disjoinRuleset(ast);\n    options.logger('disjoinRuleset', ast);\n\n    restructShorthand(ast, indexer);\n    options.logger('restructShorthand', ast);\n\n    restructBlock(ast);\n    options.logger('restructBlock', ast);\n\n    mergeRuleset(ast);\n    options.logger('mergeRuleset', ast);\n\n    restructRuleset(ast);\n    options.logger('restructRuleset', ast);\n};\n","var resolveKeyword = require('css-tree').keyword;\nvar walk = require('css-tree').walk;\nvar generate = require('css-tree').generate;\nvar createDeclarationIndexer = require('./createDeclarationIndexer');\nvar processSelector = require('./processSelector');\n\nmodule.exports = function prepare(ast, options) {\n    var markDeclaration = createDeclarationIndexer();\n\n    walk(ast, {\n        visit: 'Rule',\n        enter: function processRule(node) {\n            node.block.children.each(markDeclaration);\n            processSelector(node, options.usage);\n        }\n    });\n\n    walk(ast, {\n        visit: 'Atrule',\n        enter: function(node) {\n            if (node.prelude) {\n                node.prelude.id = null; // pre-init property to avoid multiple hidden class for generate\n                node.prelude.id = generate(node.prelude);\n            }\n\n            // compare keyframe selectors by its values\n            // NOTE: still no clarification about problems with keyframes selector grouping (issue #197)\n            if (resolveKeyword(node.name).basename === 'keyframes') {\n                node.block.avoidRulesMerge = true;  /* probably we don't need to prevent those merges for @keyframes\n                                                       TODO: need to be checked */\n                node.block.children.each(function(rule) {\n                    rule.prelude.children.each(function(simpleselector) {\n                        simpleselector.compareMarker = simpleselector.id;\n                    });\n                });\n            }\n        }\n    });\n\n    return {\n        declaration: markDeclaration\n    };\n};\n","var generate = require('css-tree').generate;\n\nfunction Index() {\n    this.seed = 0;\n    this.map = Object.create(null);\n}\n\nIndex.prototype.resolve = function(str) {\n    var index = this.map[str];\n\n    if (!index) {\n        index = ++this.seed;\n        this.map[str] = index;\n    }\n\n    return index;\n};\n\nmodule.exports = function createDeclarationIndexer() {\n    var ids = new Index();\n\n    return function markDeclaration(node) {\n        var id = generate(node);\n\n        node.id = ids.resolve(id);\n        node.length = id.length;\n        node.fingerprint = null;\n\n        return node;\n    };\n};\n","var generate = require('css-tree').generate;\nvar specificity = require('./specificity');\n\nvar nonFreezePseudoElements = {\n    'first-letter': true,\n    'first-line': true,\n    'after': true,\n    'before': true\n};\nvar nonFreezePseudoClasses = {\n    'link': true,\n    'visited': true,\n    'hover': true,\n    'active': true,\n    'first-letter': true,\n    'first-line': true,\n    'after': true,\n    'before': true\n};\n\nmodule.exports = function freeze(node, usageData) {\n    var pseudos = Object.create(null);\n    var hasPseudo = false;\n\n    node.prelude.children.each(function(simpleSelector) {\n        var tagName = '*';\n        var scope = 0;\n\n        simpleSelector.children.each(function(node) {\n            switch (node.type) {\n                case 'ClassSelector':\n                    if (usageData && usageData.scopes) {\n                        var classScope = usageData.scopes[node.name] || 0;\n\n                        if (scope !== 0 && classScope !== scope) {\n                            throw new Error('Selector can\\'t has classes from different scopes: ' + generate(simpleSelector));\n                        }\n\n                        scope = classScope;\n                    }\n                    break;\n\n                case 'PseudoClassSelector':\n                    var name = node.name.toLowerCase();\n\n                    if (!nonFreezePseudoClasses.hasOwnProperty(name)) {\n                        pseudos[name] = true;\n                        hasPseudo = true;\n                    }\n                    break;\n\n                case 'PseudoElementSelector':\n                    var name = node.name.toLowerCase();\n\n                    if (!nonFreezePseudoElements.hasOwnProperty(name)) {\n                        pseudos[name] = true;\n                        hasPseudo = true;\n                    }\n                    break;\n\n                case 'TypeSelector':\n                    tagName = node.name.toLowerCase();\n                    break;\n\n                case 'AttributeSelector':\n                    if (node.flags) {\n                        pseudos['[' + node.flags.toLowerCase() + ']'] = true;\n                        hasPseudo = true;\n                    }\n                    break;\n\n                case 'WhiteSpace':\n                case 'Combinator':\n                    tagName = '*';\n                    break;\n            }\n        });\n\n        simpleSelector.compareMarker = specificity(simpleSelector).toString();\n        simpleSelector.id = null; // pre-init property to avoid multiple hidden class\n        simpleSelector.id = generate(simpleSelector);\n\n        if (scope) {\n            simpleSelector.compareMarker += ':' + scope;\n        }\n\n        if (tagName !== '*') {\n            simpleSelector.compareMarker += ',' + tagName;\n        }\n    });\n\n    // add property to all rule nodes to avoid multiple hidden class\n    node.pseudoSignature = hasPseudo && Object.keys(pseudos).sort().join(',');\n};\n","module.exports = function specificity(simpleSelector) {\n    var A = 0;\n    var B = 0;\n    var C = 0;\n\n    simpleSelector.children.each(function walk(node) {\n        switch (node.type) {\n            case 'SelectorList':\n            case 'Selector':\n                node.children.each(walk);\n                break;\n\n            case 'IdSelector':\n                A++;\n                break;\n\n            case 'ClassSelector':\n            case 'AttributeSelector':\n                B++;\n                break;\n\n            case 'PseudoClassSelector':\n                switch (node.name.toLowerCase()) {\n                    case 'not':\n                        node.children.each(walk);\n                        break;\n\n                    case 'before':\n                    case 'after':\n                    case 'first-line':\n                    case 'first-letter':\n                        C++;\n                        break;\n\n                    // TODO: support for :nth-*(.. of <SelectorList>), :matches(), :has()\n                    default:\n                        B++;\n                }\n                break;\n\n            case 'PseudoElementSelector':\n                C++;\n                break;\n\n            case 'TypeSelector':\n                // ignore universal selector\n                if (node.name.charAt(node.name.length - 1) !== '*') {\n                    C++;\n                }\n                break;\n\n        }\n    });\n\n    return [A, B, C];\n};\n","var List = require('css-tree').List;\nvar resolveKeyword = require('css-tree').keyword;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar walk = require('css-tree').walk;\n\nfunction addRuleToMap(map, item, list, single) {\n    var node = item.data;\n    var name = resolveKeyword(node.name).basename;\n    var id = node.name.toLowerCase() + '/' + (node.prelude ? node.prelude.id : null);\n\n    if (!hasOwnProperty.call(map, name)) {\n        map[name] = Object.create(null);\n    }\n\n    if (single) {\n        delete map[name][id];\n    }\n\n    if (!hasOwnProperty.call(map[name], id)) {\n        map[name][id] = new List();\n    }\n\n    map[name][id].append(list.remove(item));\n}\n\nfunction relocateAtrules(ast, options) {\n    var collected = Object.create(null);\n    var topInjectPoint = null;\n\n    ast.children.each(function(node, item, list) {\n        if (node.type === 'Atrule') {\n            var name = resolveKeyword(node.name).basename;\n\n            switch (name) {\n                case 'keyframes':\n                    addRuleToMap(collected, item, list, true);\n                    return;\n\n                case 'media':\n                    if (options.forceMediaMerge) {\n                        addRuleToMap(collected, item, list, false);\n                        return;\n                    }\n                    break;\n            }\n\n            if (topInjectPoint === null &&\n                name !== 'charset' &&\n                name !== 'import') {\n                topInjectPoint = item;\n            }\n        } else {\n            if (topInjectPoint === null) {\n                topInjectPoint = item;\n            }\n        }\n    });\n\n    for (var atrule in collected) {\n        for (var id in collected[atrule]) {\n            ast.children.insertList(\n                collected[atrule][id],\n                atrule === 'media' ? null : topInjectPoint\n            );\n        }\n    }\n};\n\nfunction isMediaRule(node) {\n    return node.type === 'Atrule' && node.name === 'media';\n}\n\nfunction processAtrule(node, item, list) {\n    if (!isMediaRule(node)) {\n        return;\n    }\n\n    var prev = item.prev && item.prev.data;\n\n    if (!prev || !isMediaRule(prev)) {\n        return;\n    }\n\n    // merge @media with same query\n    if (node.prelude &&\n        prev.prelude &&\n        node.prelude.id === prev.prelude.id) {\n        prev.block.children.appendList(node.block.children);\n        list.remove(item);\n\n        // TODO: use it when we can refer to several points in source\n        // prev.loc = {\n        //     primary: prev.loc,\n        //     merged: node.loc\n        // };\n    }\n}\n\nmodule.exports = function rejoinAtrule(ast, options) {\n    relocateAtrules(ast, options);\n\n    walk(ast, {\n        visit: 'Atrule',\n        reverse: true,\n        enter: processAtrule\n    });\n};\n","var walk = require('css-tree').walk;\nvar utils = require('./utils');\n\nfunction processRule(node, item, list) {\n    var selectors = node.prelude.children;\n    var declarations = node.block.children;\n\n    list.prevUntil(item.prev, function(prev) {\n        // skip non-ruleset node if safe\n        if (prev.type !== 'Rule') {\n            return utils.unsafeToSkipNode.call(selectors, prev);\n        }\n\n        var prevSelectors = prev.prelude.children;\n        var prevDeclarations = prev.block.children;\n\n        // try to join rulesets with equal pseudo signature\n        if (node.pseudoSignature === prev.pseudoSignature) {\n            // try to join by selectors\n            if (utils.isEqualSelectors(prevSelectors, selectors)) {\n                prevDeclarations.appendList(declarations);\n                list.remove(item);\n                return true;\n            }\n\n            // try to join by declarations\n            if (utils.isEqualDeclarations(declarations, prevDeclarations)) {\n                utils.addSelectors(prevSelectors, selectors);\n                list.remove(item);\n                return true;\n            }\n        }\n\n        // go to prev ruleset if has no selector similarities\n        return utils.hasSimilarSelectors(selectors, prevSelectors);\n    });\n}\n\n// NOTE: direction should be left to right, since rulesets merge to left\n// ruleset. When direction right to left unmerged rulesets may prevent lookup\n// TODO: remove initial merge\nmodule.exports = function initialMergeRule(ast) {\n    walk(ast, {\n        visit: 'Rule',\n        enter: processRule\n    });\n};\n","var hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction isEqualSelectors(a, b) {\n    var cursor1 = a.head;\n    var cursor2 = b.head;\n\n    while (cursor1 !== null && cursor2 !== null && cursor1.data.id === cursor2.data.id) {\n        cursor1 = cursor1.next;\n        cursor2 = cursor2.next;\n    }\n\n    return cursor1 === null && cursor2 === null;\n}\n\nfunction isEqualDeclarations(a, b) {\n    var cursor1 = a.head;\n    var cursor2 = b.head;\n\n    while (cursor1 !== null && cursor2 !== null && cursor1.data.id === cursor2.data.id) {\n        cursor1 = cursor1.next;\n        cursor2 = cursor2.next;\n    }\n\n    return cursor1 === null && cursor2 === null;\n}\n\nfunction compareDeclarations(declarations1, declarations2) {\n    var result = {\n        eq: [],\n        ne1: [],\n        ne2: [],\n        ne2overrided: []\n    };\n\n    var fingerprints = Object.create(null);\n    var declarations2hash = Object.create(null);\n\n    for (var cursor = declarations2.head; cursor; cursor = cursor.next)  {\n        declarations2hash[cursor.data.id] = true;\n    }\n\n    for (var cursor = declarations1.head; cursor; cursor = cursor.next)  {\n        var data = cursor.data;\n\n        if (data.fingerprint) {\n            fingerprints[data.fingerprint] = data.important;\n        }\n\n        if (declarations2hash[data.id]) {\n            declarations2hash[data.id] = false;\n            result.eq.push(data);\n        } else {\n            result.ne1.push(data);\n        }\n    }\n\n    for (var cursor = declarations2.head; cursor; cursor = cursor.next)  {\n        var data = cursor.data;\n\n        if (declarations2hash[data.id]) {\n            // when declarations1 has an overriding declaration, this is not a difference\n            // unless no !important is used on prev and !important is used on the following\n            if (!hasOwnProperty.call(fingerprints, data.fingerprint) ||\n                (!fingerprints[data.fingerprint] && data.important)) {\n                result.ne2.push(data);\n            }\n\n            result.ne2overrided.push(data);\n        }\n    }\n\n    return result;\n}\n\nfunction addSelectors(dest, source) {\n    source.each(function(sourceData) {\n        var newStr = sourceData.id;\n        var cursor = dest.head;\n\n        while (cursor) {\n            var nextStr = cursor.data.id;\n\n            if (nextStr === newStr) {\n                return;\n            }\n\n            if (nextStr > newStr) {\n                break;\n            }\n\n            cursor = cursor.next;\n        }\n\n        dest.insert(dest.createItem(sourceData), cursor);\n    });\n\n    return dest;\n}\n\n// check if simpleselectors has no equal specificity and element selector\nfunction hasSimilarSelectors(selectors1, selectors2) {\n    var cursor1 = selectors1.head;\n\n    while (cursor1 !== null) {\n        var cursor2 = selectors2.head;\n\n        while (cursor2 !== null) {\n            if (cursor1.data.compareMarker === cursor2.data.compareMarker) {\n                return true;\n            }\n\n            cursor2 = cursor2.next;\n        }\n\n        cursor1 = cursor1.next;\n    }\n\n    return false;\n}\n\n// test node can't to be skipped\nfunction unsafeToSkipNode(node) {\n    switch (node.type) {\n        case 'Rule':\n            // unsafe skip ruleset with selector similarities\n            return hasSimilarSelectors(node.prelude.children, this);\n\n        case 'Atrule':\n            // can skip at-rules with blocks\n            if (node.block) {\n                // unsafe skip at-rule if block contains something unsafe to skip\n                return node.block.children.some(unsafeToSkipNode, this);\n            }\n            break;\n\n        case 'Declaration':\n            return false;\n    }\n\n    // unsafe by default\n    return true;\n}\n\nmodule.exports = {\n    isEqualSelectors: isEqualSelectors,\n    isEqualDeclarations: isEqualDeclarations,\n    compareDeclarations: compareDeclarations,\n    addSelectors: addSelectors,\n    hasSimilarSelectors: hasSimilarSelectors,\n    unsafeToSkipNode: unsafeToSkipNode\n};\n","var List = require('css-tree').List;\nvar walk = require('css-tree').walk;\n\nfunction processRule(node, item, list) {\n    var selectors = node.prelude.children;\n\n    // generate new rule sets:\n    // .a, .b { color: red; }\n    // ->\n    // .a { color: red; }\n    // .b { color: red; }\n\n    // while there are more than 1 simple selector split for rulesets\n    while (selectors.head !== selectors.tail) {\n        var newSelectors = new List();\n        newSelectors.insert(selectors.remove(selectors.head));\n\n        list.insert(list.createItem({\n            type: 'Rule',\n            loc: node.loc,\n            prelude: {\n                type: 'SelectorList',\n                loc: node.prelude.loc,\n                children: newSelectors\n            },\n            block: {\n                type: 'Block',\n                loc: node.block.loc,\n                children: node.block.children.copy()\n            },\n            pseudoSignature: node.pseudoSignature\n        }), item);\n    }\n}\n\nmodule.exports = function disjoinRule(ast) {\n    walk(ast, {\n        visit: 'Rule',\n        reverse: true,\n        enter: processRule\n    });\n};\n","var List = require('css-tree').List;\nvar generate = require('css-tree').generate;\nvar walk = require('css-tree').walk;\n\nvar REPLACE = 1;\nvar REMOVE = 2;\nvar TOP = 0;\nvar RIGHT = 1;\nvar BOTTOM = 2;\nvar LEFT = 3;\nvar SIDES = ['top', 'right', 'bottom', 'left'];\nvar SIDE = {\n    'margin-top': 'top',\n    'margin-right': 'right',\n    'margin-bottom': 'bottom',\n    'margin-left': 'left',\n\n    'padding-top': 'top',\n    'padding-right': 'right',\n    'padding-bottom': 'bottom',\n    'padding-left': 'left',\n\n    'border-top-color': 'top',\n    'border-right-color': 'right',\n    'border-bottom-color': 'bottom',\n    'border-left-color': 'left',\n    'border-top-width': 'top',\n    'border-right-width': 'right',\n    'border-bottom-width': 'bottom',\n    'border-left-width': 'left',\n    'border-top-style': 'top',\n    'border-right-style': 'right',\n    'border-bottom-style': 'bottom',\n    'border-left-style': 'left'\n};\nvar MAIN_PROPERTY = {\n    'margin': 'margin',\n    'margin-top': 'margin',\n    'margin-right': 'margin',\n    'margin-bottom': 'margin',\n    'margin-left': 'margin',\n\n    'padding': 'padding',\n    'padding-top': 'padding',\n    'padding-right': 'padding',\n    'padding-bottom': 'padding',\n    'padding-left': 'padding',\n\n    'border-color': 'border-color',\n    'border-top-color': 'border-color',\n    'border-right-color': 'border-color',\n    'border-bottom-color': 'border-color',\n    'border-left-color': 'border-color',\n    'border-width': 'border-width',\n    'border-top-width': 'border-width',\n    'border-right-width': 'border-width',\n    'border-bottom-width': 'border-width',\n    'border-left-width': 'border-width',\n    'border-style': 'border-style',\n    'border-top-style': 'border-style',\n    'border-right-style': 'border-style',\n    'border-bottom-style': 'border-style',\n    'border-left-style': 'border-style'\n};\n\nfunction TRBL(name) {\n    this.name = name;\n    this.loc = null;\n    this.iehack = undefined;\n    this.sides = {\n        'top': null,\n        'right': null,\n        'bottom': null,\n        'left': null\n    };\n}\n\nTRBL.prototype.getValueSequence = function(declaration, count) {\n    var values = [];\n    var iehack = '';\n    var hasBadValues = declaration.value.children.some(function(child) {\n        var special = false;\n\n        switch (child.type) {\n            case 'Identifier':\n                switch (child.name) {\n                    case '\\\\0':\n                    case '\\\\9':\n                        iehack = child.name;\n                        return;\n\n                    case 'inherit':\n                    case 'initial':\n                    case 'unset':\n                    case 'revert':\n                        special = child.name;\n                        break;\n                }\n                break;\n\n            case 'Dimension':\n                switch (child.unit) {\n                    // is not supported until IE11\n                    case 'rem':\n\n                    // v* units is too buggy across browsers and better\n                    // don't merge values with those units\n                    case 'vw':\n                    case 'vh':\n                    case 'vmin':\n                    case 'vmax':\n                    case 'vm': // IE9 supporting \"vm\" instead of \"vmin\".\n                        special = child.unit;\n                        break;\n                }\n                break;\n\n            case 'HexColor': // color\n            case 'Number':\n            case 'Percentage':\n                break;\n\n            case 'Function':\n                special = child.name;\n                break;\n\n            case 'WhiteSpace':\n                return false; // ignore space\n\n            default:\n                return true;  // bad value\n        }\n\n        values.push({\n            node: child,\n            special: special,\n            important: declaration.important\n        });\n    });\n\n    if (hasBadValues || values.length > count) {\n        return false;\n    }\n\n    if (typeof this.iehack === 'string' && this.iehack !== iehack) {\n        return false;\n    }\n\n    this.iehack = iehack; // move outside\n\n    return values;\n};\n\nTRBL.prototype.canOverride = function(side, value) {\n    var currentValue = this.sides[side];\n\n    return !currentValue || (value.important && !currentValue.important);\n};\n\nTRBL.prototype.add = function(name, declaration) {\n    function attemptToAdd() {\n        var sides = this.sides;\n        var side = SIDE[name];\n\n        if (side) {\n            if (side in sides === false) {\n                return false;\n            }\n\n            var values = this.getValueSequence(declaration, 1);\n\n            if (!values || !values.length) {\n                return false;\n            }\n\n            // can mix only if specials are equal\n            for (var key in sides) {\n                if (sides[key] !== null && sides[key].special !== values[0].special) {\n                    return false;\n                }\n            }\n\n            if (!this.canOverride(side, values[0])) {\n                return true;\n            }\n\n            sides[side] = values[0];\n            return true;\n        } else if (name === this.name) {\n            var values = this.getValueSequence(declaration, 4);\n\n            if (!values || !values.length) {\n                return false;\n            }\n\n            switch (values.length) {\n                case 1:\n                    values[RIGHT] = values[TOP];\n                    values[BOTTOM] = values[TOP];\n                    values[LEFT] = values[TOP];\n                    break;\n\n                case 2:\n                    values[BOTTOM] = values[TOP];\n                    values[LEFT] = values[RIGHT];\n                    break;\n\n                case 3:\n                    values[LEFT] = values[RIGHT];\n                    break;\n            }\n\n            // can mix only if specials are equal\n            for (var i = 0; i < 4; i++) {\n                for (var key in sides) {\n                    if (sides[key] !== null && sides[key].special !== values[i].special) {\n                        return false;\n                    }\n                }\n            }\n\n            for (var i = 0; i < 4; i++) {\n                if (this.canOverride(SIDES[i], values[i])) {\n                    sides[SIDES[i]] = values[i];\n                }\n            }\n\n            return true;\n        }\n    }\n\n    if (!attemptToAdd.call(this)) {\n        return false;\n    }\n\n    // TODO: use it when we can refer to several points in source\n    // if (this.loc) {\n    //     this.loc = {\n    //         primary: this.loc,\n    //         merged: declaration.loc\n    //     };\n    // } else {\n    //     this.loc = declaration.loc;\n    // }\n    if (!this.loc) {\n        this.loc = declaration.loc;\n    }\n\n    return true;\n};\n\nTRBL.prototype.isOkToMinimize = function() {\n    var top = this.sides.top;\n    var right = this.sides.right;\n    var bottom = this.sides.bottom;\n    var left = this.sides.left;\n\n    if (top && right && bottom && left) {\n        var important =\n            top.important +\n            right.important +\n            bottom.important +\n            left.important;\n\n        return important === 0 || important === 4;\n    }\n\n    return false;\n};\n\nTRBL.prototype.getValue = function() {\n    var result = new List();\n    var sides = this.sides;\n    var values = [\n        sides.top,\n        sides.right,\n        sides.bottom,\n        sides.left\n    ];\n    var stringValues = [\n        generate(sides.top.node),\n        generate(sides.right.node),\n        generate(sides.bottom.node),\n        generate(sides.left.node)\n    ];\n\n    if (stringValues[LEFT] === stringValues[RIGHT]) {\n        values.pop();\n        if (stringValues[BOTTOM] === stringValues[TOP]) {\n            values.pop();\n            if (stringValues[RIGHT] === stringValues[TOP]) {\n                values.pop();\n            }\n        }\n    }\n\n    for (var i = 0; i < values.length; i++) {\n        if (i) {\n            result.appendData({ type: 'WhiteSpace', value: ' ' });\n        }\n\n        result.appendData(values[i].node);\n    }\n\n    if (this.iehack) {\n        result.appendData({ type: 'WhiteSpace', value: ' ' });\n        result.appendData({\n            type: 'Identifier',\n            loc: null,\n            name: this.iehack\n        });\n    }\n\n    return {\n        type: 'Value',\n        loc: null,\n        children: result\n    };\n};\n\nTRBL.prototype.getDeclaration = function() {\n    return {\n        type: 'Declaration',\n        loc: this.loc,\n        important: this.sides.top.important,\n        property: this.name,\n        value: this.getValue()\n    };\n};\n\nfunction processRule(rule, shorts, shortDeclarations, lastShortSelector) {\n    var declarations = rule.block.children;\n    var selector = rule.prelude.children.first().id;\n\n    rule.block.children.eachRight(function(declaration, item) {\n        var property = declaration.property;\n\n        if (!MAIN_PROPERTY.hasOwnProperty(property)) {\n            return;\n        }\n\n        var key = MAIN_PROPERTY[property];\n        var shorthand;\n        var operation;\n\n        if (!lastShortSelector || selector === lastShortSelector) {\n            if (key in shorts) {\n                operation = REMOVE;\n                shorthand = shorts[key];\n            }\n        }\n\n        if (!shorthand || !shorthand.add(property, declaration)) {\n            operation = REPLACE;\n            shorthand = new TRBL(key);\n\n            // if can't parse value ignore it and break shorthand children\n            if (!shorthand.add(property, declaration)) {\n                lastShortSelector = null;\n                return;\n            }\n        }\n\n        shorts[key] = shorthand;\n        shortDeclarations.push({\n            operation: operation,\n            block: declarations,\n            item: item,\n            shorthand: shorthand\n        });\n\n        lastShortSelector = selector;\n    });\n\n    return lastShortSelector;\n}\n\nfunction processShorthands(shortDeclarations, markDeclaration) {\n    shortDeclarations.forEach(function(item) {\n        var shorthand = item.shorthand;\n\n        if (!shorthand.isOkToMinimize()) {\n            return;\n        }\n\n        if (item.operation === REPLACE) {\n            item.item.data = markDeclaration(shorthand.getDeclaration());\n        } else {\n            item.block.remove(item.item);\n        }\n    });\n}\n\nmodule.exports = function restructBlock(ast, indexer) {\n    var stylesheetMap = {};\n    var shortDeclarations = [];\n\n    walk(ast, {\n        visit: 'Rule',\n        reverse: true,\n        enter: function(node) {\n            var stylesheet = this.block || this.stylesheet;\n            var ruleId = (node.pseudoSignature || '') + '|' + node.prelude.children.first().id;\n            var ruleMap;\n            var shorts;\n\n            if (!stylesheetMap.hasOwnProperty(stylesheet.id)) {\n                ruleMap = {\n                    lastShortSelector: null\n                };\n                stylesheetMap[stylesheet.id] = ruleMap;\n            } else {\n                ruleMap = stylesheetMap[stylesheet.id];\n            }\n\n            if (ruleMap.hasOwnProperty(ruleId)) {\n                shorts = ruleMap[ruleId];\n            } else {\n                shorts = {};\n                ruleMap[ruleId] = shorts;\n            }\n\n            ruleMap.lastShortSelector = processRule.call(this, node, shorts, shortDeclarations, ruleMap.lastShortSelector);\n        }\n    });\n\n    processShorthands(shortDeclarations, indexer.declaration);\n};\n","var resolveProperty = require('css-tree').property;\nvar resolveKeyword = require('css-tree').keyword;\nvar walk = require('css-tree').walk;\nvar generate = require('css-tree').generate;\nvar fingerprintId = 1;\nvar dontRestructure = {\n    'src': 1 // https://github.com/afelix/csso/issues/50\n};\n\nvar DONT_MIX_VALUE = {\n    // https://developer.mozilla.org/en-US/docs/Web/CSS/display#Browser_compatibility\n    'display': /table|ruby|flex|-(flex)?box$|grid|contents|run-in/i,\n    // https://developer.mozilla.org/en/docs/Web/CSS/text-align\n    'text-align': /^(start|end|match-parent|justify-all)$/i\n};\n\nvar CURSOR_SAFE_VALUE = [\n    'auto', 'crosshair', 'default', 'move', 'text', 'wait', 'help',\n    'n-resize', 'e-resize', 's-resize', 'w-resize',\n    'ne-resize', 'nw-resize', 'se-resize', 'sw-resize',\n    'pointer', 'progress', 'not-allowed', 'no-drop', 'vertical-text', 'all-scroll',\n    'col-resize', 'row-resize'\n];\n\nvar POSITION_SAFE_VALUE = [\n    'static', 'relative', 'absolute', 'fixed'\n];\n\nvar NEEDLESS_TABLE = {\n    'border-width': ['border'],\n    'border-style': ['border'],\n    'border-color': ['border'],\n    'border-top': ['border'],\n    'border-right': ['border'],\n    'border-bottom': ['border'],\n    'border-left': ['border'],\n    'border-top-width': ['border-top', 'border-width', 'border'],\n    'border-right-width': ['border-right', 'border-width', 'border'],\n    'border-bottom-width': ['border-bottom', 'border-width', 'border'],\n    'border-left-width': ['border-left', 'border-width', 'border'],\n    'border-top-style': ['border-top', 'border-style', 'border'],\n    'border-right-style': ['border-right', 'border-style', 'border'],\n    'border-bottom-style': ['border-bottom', 'border-style', 'border'],\n    'border-left-style': ['border-left', 'border-style', 'border'],\n    'border-top-color': ['border-top', 'border-color', 'border'],\n    'border-right-color': ['border-right', 'border-color', 'border'],\n    'border-bottom-color': ['border-bottom', 'border-color', 'border'],\n    'border-left-color': ['border-left', 'border-color', 'border'],\n    'margin-top': ['margin'],\n    'margin-right': ['margin'],\n    'margin-bottom': ['margin'],\n    'margin-left': ['margin'],\n    'padding-top': ['padding'],\n    'padding-right': ['padding'],\n    'padding-bottom': ['padding'],\n    'padding-left': ['padding'],\n    'font-style': ['font'],\n    'font-variant': ['font'],\n    'font-weight': ['font'],\n    'font-size': ['font'],\n    'font-family': ['font'],\n    'list-style-type': ['list-style'],\n    'list-style-position': ['list-style'],\n    'list-style-image': ['list-style']\n};\n\nfunction getPropertyFingerprint(propertyName, declaration, fingerprints) {\n    var realName = resolveProperty(propertyName).basename;\n\n    if (realName === 'background') {\n        return propertyName + ':' + generate(declaration.value);\n    }\n\n    var declarationId = declaration.id;\n    var fingerprint = fingerprints[declarationId];\n\n    if (!fingerprint) {\n        switch (declaration.value.type) {\n            case 'Value':\n                var vendorId = '';\n                var iehack = '';\n                var special = {};\n                var raw = false;\n\n                declaration.value.children.each(function walk(node) {\n                    switch (node.type) {\n                        case 'Value':\n                        case 'Brackets':\n                        case 'Parentheses':\n                            node.children.each(walk);\n                            break;\n\n                        case 'Raw':\n                            raw = true;\n                            break;\n\n                        case 'Identifier':\n                            var name = node.name;\n\n                            if (!vendorId) {\n                                vendorId = resolveKeyword(name).vendor;\n                            }\n\n                            if (/\\\\[09]/.test(name)) {\n                                iehack = RegExp.lastMatch;\n                            }\n\n                            if (realName === 'cursor') {\n                                if (CURSOR_SAFE_VALUE.indexOf(name) === -1) {\n                                    special[name] = true;\n                                }\n                            } else if (realName === 'position') {\n                                if (POSITION_SAFE_VALUE.indexOf(name) === -1) {\n                                    special[name] = true;\n                                }\n                            } else if (DONT_MIX_VALUE.hasOwnProperty(realName)) {\n                                if (DONT_MIX_VALUE[realName].test(name)) {\n                                    special[name] = true;\n                                }\n                            }\n\n                            break;\n\n                        case 'Function':\n                            var name = node.name;\n\n                            if (!vendorId) {\n                                vendorId = resolveKeyword(name).vendor;\n                            }\n\n                            if (name === 'rect') {\n                                // there are 2 forms of rect:\n                                //   rect(<top>, <right>, <bottom>, <left>) - standart\n                                //   rect(<top> <right> <bottom> <left>) – backwards compatible syntax\n                                // only the same form values can be merged\n                                var hasComma = node.children.some(function(node) {\n                                    return node.type === 'Operator' && node.value === ',';\n                                });\n                                if (!hasComma) {\n                                    name = 'rect-backward';\n                                }\n                            }\n\n                            special[name + '()'] = true;\n\n                            // check nested tokens too\n                            node.children.each(walk);\n\n                            break;\n\n                        case 'Dimension':\n                            var unit = node.unit;\n\n                            if (/\\\\[09]/.test(unit)) {\n                                iehack = RegExp.lastMatch;\n                            }\n\n                            switch (unit) {\n                                // is not supported until IE11\n                                case 'rem':\n\n                                // v* units is too buggy across browsers and better\n                                // don't merge values with those units\n                                case 'vw':\n                                case 'vh':\n                                case 'vmin':\n                                case 'vmax':\n                                case 'vm': // IE9 supporting \"vm\" instead of \"vmin\".\n                                    special[unit] = true;\n                                    break;\n                            }\n                            break;\n                    }\n                });\n\n                fingerprint = raw\n                    ? '!' + fingerprintId++\n                    : '!' + Object.keys(special).sort() + '|' + iehack + vendorId;\n                break;\n\n            case 'Raw':\n                fingerprint = '!' + declaration.value.value;\n                break;\n\n            default:\n                fingerprint = generate(declaration.value);\n        }\n\n        fingerprints[declarationId] = fingerprint;\n    }\n\n    return propertyName + fingerprint;\n}\n\nfunction needless(props, declaration, fingerprints) {\n    var property = resolveProperty(declaration.property);\n\n    if (NEEDLESS_TABLE.hasOwnProperty(property.basename)) {\n        var table = NEEDLESS_TABLE[property.basename];\n\n        for (var i = 0; i < table.length; i++) {\n            var ppre = getPropertyFingerprint(property.prefix + table[i], declaration, fingerprints);\n            var prev = props.hasOwnProperty(ppre) ? props[ppre] : null;\n\n            if (prev && (!declaration.important || prev.item.data.important)) {\n                return prev;\n            }\n        }\n    }\n}\n\nfunction processRule(rule, item, list, props, fingerprints) {\n    var declarations = rule.block.children;\n\n    declarations.eachRight(function(declaration, declarationItem) {\n        var property = declaration.property;\n        var fingerprint = getPropertyFingerprint(property, declaration, fingerprints);\n        var prev = props[fingerprint];\n\n        if (prev && !dontRestructure.hasOwnProperty(property)) {\n            if (declaration.important && !prev.item.data.important) {\n                props[fingerprint] = {\n                    block: declarations,\n                    item: declarationItem\n                };\n\n                prev.block.remove(prev.item);\n\n                // TODO: use it when we can refer to several points in source\n                // declaration.loc = {\n                //     primary: declaration.loc,\n                //     merged: prev.item.data.loc\n                // };\n            } else {\n                declarations.remove(declarationItem);\n\n                // TODO: use it when we can refer to several points in source\n                // prev.item.data.loc = {\n                //     primary: prev.item.data.loc,\n                //     merged: declaration.loc\n                // };\n            }\n        } else {\n            var prev = needless(props, declaration, fingerprints);\n\n            if (prev) {\n                declarations.remove(declarationItem);\n\n                // TODO: use it when we can refer to several points in source\n                // prev.item.data.loc = {\n                //     primary: prev.item.data.loc,\n                //     merged: declaration.loc\n                // };\n            } else {\n                declaration.fingerprint = fingerprint;\n\n                props[fingerprint] = {\n                    block: declarations,\n                    item: declarationItem\n                };\n            }\n        }\n    });\n\n    if (declarations.isEmpty()) {\n        list.remove(item);\n    }\n}\n\nmodule.exports = function restructBlock(ast) {\n    var stylesheetMap = {};\n    var fingerprints = Object.create(null);\n\n    walk(ast, {\n        visit: 'Rule',\n        reverse: true,\n        enter: function(node, item, list) {\n            var stylesheet = this.block || this.stylesheet;\n            var ruleId = (node.pseudoSignature || '') + '|' + node.prelude.children.first().id;\n            var ruleMap;\n            var props;\n\n            if (!stylesheetMap.hasOwnProperty(stylesheet.id)) {\n                ruleMap = {};\n                stylesheetMap[stylesheet.id] = ruleMap;\n            } else {\n                ruleMap = stylesheetMap[stylesheet.id];\n            }\n\n            if (ruleMap.hasOwnProperty(ruleId)) {\n                props = ruleMap[ruleId];\n            } else {\n                props = {};\n                ruleMap[ruleId] = props;\n            }\n\n            processRule.call(this, node, item, list, props, fingerprints);\n        }\n    });\n};\n","var walk = require('css-tree').walk;\nvar utils = require('./utils');\n\n/*\n    At this step all rules has single simple selector. We try to join by equal\n    declaration blocks to first rule, e.g.\n\n    .a { color: red }\n    b { ... }\n    .b { color: red }\n    ->\n    .a, .b { color: red }\n    b { ... }\n*/\n\nfunction processRule(node, item, list) {\n    var selectors = node.prelude.children;\n    var declarations = node.block.children;\n    var nodeCompareMarker = selectors.first().compareMarker;\n    var skippedCompareMarkers = {};\n\n    list.nextUntil(item.next, function(next, nextItem) {\n        // skip non-ruleset node if safe\n        if (next.type !== 'Rule') {\n            return utils.unsafeToSkipNode.call(selectors, next);\n        }\n\n        if (node.pseudoSignature !== next.pseudoSignature) {\n            return true;\n        }\n\n        var nextFirstSelector = next.prelude.children.head;\n        var nextDeclarations = next.block.children;\n        var nextCompareMarker = nextFirstSelector.data.compareMarker;\n\n        // if next ruleset has same marked as one of skipped then stop joining\n        if (nextCompareMarker in skippedCompareMarkers) {\n            return true;\n        }\n\n        // try to join by selectors\n        if (selectors.head === selectors.tail) {\n            if (selectors.first().id === nextFirstSelector.data.id) {\n                declarations.appendList(nextDeclarations);\n                list.remove(nextItem);\n                return;\n            }\n        }\n\n        // try to join by properties\n        if (utils.isEqualDeclarations(declarations, nextDeclarations)) {\n            var nextStr = nextFirstSelector.data.id;\n\n            selectors.some(function(data, item) {\n                var curStr = data.id;\n\n                if (nextStr < curStr) {\n                    selectors.insert(nextFirstSelector, item);\n                    return true;\n                }\n\n                if (!item.next) {\n                    selectors.insert(nextFirstSelector);\n                    return true;\n                }\n            });\n\n            list.remove(nextItem);\n            return;\n        }\n\n        // go to next ruleset if current one can be skipped (has no equal specificity nor element selector)\n        if (nextCompareMarker === nodeCompareMarker) {\n            return true;\n        }\n\n        skippedCompareMarkers[nextCompareMarker] = true;\n    });\n}\n\nmodule.exports = function mergeRule(ast) {\n    walk(ast, {\n        visit: 'Rule',\n        enter: processRule\n    });\n};\n","var List = require('css-tree').List;\nvar walk = require('css-tree').walk;\nvar utils = require('./utils');\n\nfunction calcSelectorLength(list) {\n    var length = 0;\n\n    list.each(function(data) {\n        length += data.id.length + 1;\n    });\n\n    return length - 1;\n}\n\nfunction calcDeclarationsLength(tokens) {\n    var length = 0;\n\n    for (var i = 0; i < tokens.length; i++) {\n        length += tokens[i].length;\n    }\n\n    return (\n        length +          // declarations\n        tokens.length - 1 // delimeters\n    );\n}\n\nfunction processRule(node, item, list) {\n    var avoidRulesMerge = this.block !== null ? this.block.avoidRulesMerge : false;\n    var selectors = node.prelude.children;\n    var block = node.block;\n    var disallowDownMarkers = Object.create(null);\n    var allowMergeUp = true;\n    var allowMergeDown = true;\n\n    list.prevUntil(item.prev, function(prev, prevItem) {\n        var prevBlock = prev.block;\n        var prevType = prev.type;\n\n        if (prevType !== 'Rule') {\n            var unsafe = utils.unsafeToSkipNode.call(selectors, prev);\n\n            if (!unsafe && prevType === 'Atrule' && prevBlock) {\n                walk(prevBlock, {\n                    visit: 'Rule',\n                    enter: function(node) {\n                        node.prelude.children.each(function(data) {\n                            disallowDownMarkers[data.compareMarker] = true;\n                        });\n                    }\n                });\n            }\n\n            return unsafe;\n        }\n\n        var prevSelectors = prev.prelude.children;\n\n        if (node.pseudoSignature !== prev.pseudoSignature) {\n            return true;\n        }\n\n        allowMergeDown = !prevSelectors.some(function(selector) {\n            return selector.compareMarker in disallowDownMarkers;\n        });\n\n        // try prev ruleset if simpleselectors has no equal specifity and element selector\n        if (!allowMergeDown && !allowMergeUp) {\n            return true;\n        }\n\n        // try to join by selectors\n        if (allowMergeUp && utils.isEqualSelectors(prevSelectors, selectors)) {\n            prevBlock.children.appendList(block.children);\n            list.remove(item);\n            return true;\n        }\n\n        // try to join by properties\n        var diff = utils.compareDeclarations(block.children, prevBlock.children);\n\n        // console.log(diff.eq, diff.ne1, diff.ne2);\n\n        if (diff.eq.length) {\n            if (!diff.ne1.length && !diff.ne2.length) {\n                // equal blocks\n                if (allowMergeDown) {\n                    utils.addSelectors(selectors, prevSelectors);\n                    list.remove(prevItem);\n                }\n\n                return true;\n            } else if (!avoidRulesMerge) { /* probably we don't need to prevent those merges for @keyframes\n                                              TODO: need to be checked */\n\n                if (diff.ne1.length && !diff.ne2.length) {\n                    // prevBlock is subset block\n                    var selectorLength = calcSelectorLength(selectors);\n                    var blockLength = calcDeclarationsLength(diff.eq); // declarations length\n\n                    if (allowMergeUp && selectorLength < blockLength) {\n                        utils.addSelectors(prevSelectors, selectors);\n                        block.children = new List().fromArray(diff.ne1);\n                    }\n                } else if (!diff.ne1.length && diff.ne2.length) {\n                    // node is subset of prevBlock\n                    var selectorLength = calcSelectorLength(prevSelectors);\n                    var blockLength = calcDeclarationsLength(diff.eq); // declarations length\n\n                    if (allowMergeDown && selectorLength < blockLength) {\n                        utils.addSelectors(selectors, prevSelectors);\n                        prevBlock.children = new List().fromArray(diff.ne2);\n                    }\n                } else {\n                    // diff.ne1.length && diff.ne2.length\n                    // extract equal block\n                    var newSelector = {\n                        type: 'SelectorList',\n                        loc: null,\n                        children: utils.addSelectors(prevSelectors.copy(), selectors)\n                    };\n                    var newBlockLength = calcSelectorLength(newSelector.children) + 2; // selectors length + curly braces length\n                    var blockLength = calcDeclarationsLength(diff.eq); // declarations length\n\n                    // create new ruleset if declarations length greater than\n                    // ruleset description overhead\n                    if (blockLength >= newBlockLength) {\n                        var newItem = list.createItem({\n                            type: 'Rule',\n                            loc: null,\n                            prelude: newSelector,\n                            block: {\n                                type: 'Block',\n                                loc: null,\n                                children: new List().fromArray(diff.eq)\n                            },\n                            pseudoSignature: node.pseudoSignature\n                        });\n\n                        block.children = new List().fromArray(diff.ne1);\n                        prevBlock.children = new List().fromArray(diff.ne2overrided);\n\n                        if (allowMergeUp) {\n                            list.insert(newItem, prevItem);\n                        } else {\n                            list.insert(newItem, item);\n                        }\n\n                        return true;\n                    }\n                }\n            }\n        }\n\n        if (allowMergeUp) {\n            // TODO: disallow up merge only if any property interception only (i.e. diff.ne2overrided.length > 0);\n            // await property families to find property interception correctly\n            allowMergeUp = !prevSelectors.some(function(prevSelector) {\n                return selectors.some(function(selector) {\n                    return selector.compareMarker === prevSelector.compareMarker;\n                });\n            });\n        }\n\n        prevSelectors.each(function(data) {\n            disallowDownMarkers[data.compareMarker] = true;\n        });\n    });\n}\n\nmodule.exports = function restructRule(ast) {\n    walk(ast, {\n        visit: 'Rule',\n        reverse: true,\n        enter: processRule\n    });\n};\n","module.exports = {\n  \"_from\": \"csso@^4.0.2\",\n  \"_id\": \"csso@4.0.3\",\n  \"_inBundle\": false,\n  \"_integrity\": \"sha512-NL3spysxUkcrOgnpsT4Xdl2aiEiBG6bXswAABQVHcMrfjjBisFOKwLDOmf4wf32aPdcJws1zds2B0Rg+jqMyHQ==\",\n  \"_location\": \"/csso\",\n  \"_phantomChildren\": {\n    \"source-map\": \"0.6.1\"\n  },\n  \"_requested\": {\n    \"type\": \"range\",\n    \"registry\": true,\n    \"raw\": \"csso@^4.0.2\",\n    \"name\": \"csso\",\n    \"escapedName\": \"csso\",\n    \"rawSpec\": \"^4.0.2\",\n    \"saveSpec\": null,\n    \"fetchSpec\": \"^4.0.2\"\n  },\n  \"_requiredBy\": [\n    \"/svgo\"\n  ],\n  \"_resolved\": \"https://registry.npmjs.org/csso/-/csso-4.0.3.tgz\",\n  \"_shasum\": \"0d9985dc852c7cc2b2cacfbbe1079014d1a8e903\",\n  \"_spec\": \"csso@^4.0.2\",\n  \"_where\": \"C:\\\\Users\\\\justi\\\\Desktop\\\\Intern_2020\\\\laotu-wechat\\\\miniprogram\\\\node_modules\\\\svgo\",\n  \"author\": {\n    \"name\": \"Sergey Kryzhanovsky\",\n    \"email\": \"skryzhanovsky@ya.ru\",\n    \"url\": \"https://github.com/afelix\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/css/csso/issues\"\n  },\n  \"bundleDependencies\": false,\n  \"dependencies\": {\n    \"css-tree\": \"1.0.0-alpha.39\"\n  },\n  \"deprecated\": false,\n  \"description\": \"CSS minifier with structural optimisations\",\n  \"devDependencies\": {\n    \"@rollup/plugin-commonjs\": \"^11.0.1\",\n    \"@rollup/plugin-json\": \"^4.0.1\",\n    \"@rollup/plugin-node-resolve\": \"^7.0.0\",\n    \"coveralls\": \"^3.0.11\",\n    \"eslint\": \"^6.8.0\",\n    \"mocha\": \"^7.1.1\",\n    \"nyc\": \"^15.0.0\",\n    \"rollup\": \"^1.29.0\",\n    \"source-map\": \"^0.6.1\",\n    \"terser\": \"^4.6.3\"\n  },\n  \"engines\": {\n    \"node\": \">=8.0.0\"\n  },\n  \"files\": [\n    \"dist/csso.js\",\n    \"dist/csso.min.js\",\n    \"lib\"\n  ],\n  \"homepage\": \"https://github.com/css/csso\",\n  \"keywords\": [\n    \"css\",\n    \"compress\",\n    \"minifier\",\n    \"minify\",\n    \"optimise\",\n    \"optimisation\",\n    \"csstree\"\n  ],\n  \"license\": \"MIT\",\n  \"main\": \"./lib/index\",\n  \"maintainers\": [\n    {\n      \"name\": \"Roman Dvornov\",\n      \"email\": \"rdvornov@gmail.com\"\n    }\n  ],\n  \"name\": \"csso\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/css/csso.git\"\n  },\n  \"scripts\": {\n    \"build\": \"rollup --config && terser dist/csso.js --compress --mangle -o dist/csso.min.js\",\n    \"coverage\": \"nyc npm test\",\n    \"coveralls\": \"nyc report --reporter=text-lcov | coveralls\",\n    \"gh-pages\": \"git clone --depth=1 -b gh-pages https://github.com/css/csso.git .gh-pages && npm run build && cp dist/csso.min.js .gh-pages/ && cd .gh-pages && git commit -am \\\"update\\\" && git push && cd .. && rm -rf .gh-pages\",\n    \"hydrogen\": \"node --trace-hydrogen --trace-phase=Z --trace-deopt --code-comments --hydrogen-track-positions --redirect-code-traces --redirect-code-traces-to=code.asm --trace_hydrogen_file=code.cfg --print-opt-code bin/csso --stat -o /dev/null\",\n    \"lint\": \"eslint lib test\",\n    \"lint-and-test\": \"npm run lint && npm test\",\n    \"postpublish\": \"npm run gh-pages\",\n    \"prepublishOnly\": \"npm run build\",\n    \"test\": \"mocha --reporter dot\",\n    \"travis\": \"nyc npm run lint-and-test && npm run coveralls\"\n  },\n  \"version\": \"4.0.3\"\n}\n"]}