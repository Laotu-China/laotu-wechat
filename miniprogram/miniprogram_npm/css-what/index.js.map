{"version":3,"sources":["index.js","parse.js","stringify.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./parse\"), exports);\nvar parse_1 = require(\"./parse\");\nObject.defineProperty(exports, \"parse\", { enumerable: true, get: function () { return parse_1.default; } });\nvar stringify_1 = require(\"./stringify\");\nObject.defineProperty(exports, \"stringify\", { enumerable: true, get: function () { return stringify_1.default; } });\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = parse;\nvar reName = /^[^\\\\]?(?:\\\\(?:[\\da-f]{1,6}\\s?|.)|[\\w\\-\\u00b0-\\uFFFF])+/;\nvar reEscape = /\\\\([\\da-f]{1,6}\\s?|(\\s)|.)/gi;\n//modified version of https://github.com/jquery/sizzle/blob/master/src/sizzle.js#L87\nvar reAttr = /^\\s*((?:\\\\.|[\\w\\u00b0-\\uFFFF-])+)\\s*(?:(\\S?)=\\s*(?:(['\"])([^]*?)\\3|(#?(?:\\\\.|[\\w\\u00b0-\\uFFFF-])*)|)|)\\s*(i)?\\]/;\nvar actionTypes = {\n    undefined: \"exists\",\n    \"\": \"equals\",\n    \"~\": \"element\",\n    \"^\": \"start\",\n    $: \"end\",\n    \"*\": \"any\",\n    \"!\": \"not\",\n    \"|\": \"hyphen\",\n};\nvar Traversals = {\n    \">\": \"child\",\n    \"<\": \"parent\",\n    \"~\": \"sibling\",\n    \"+\": \"adjacent\",\n};\nvar attribSelectors = {\n    \"#\": [\"id\", \"equals\"],\n    \".\": [\"class\", \"element\"],\n};\n//pseudos, whose data-property is parsed as well\nvar unpackPseudos = new Set([\"has\", \"not\", \"matches\"]);\nvar stripQuotesFromPseudos = new Set([\"contains\", \"icontains\"]);\nvar quotes = new Set(['\"', \"'\"]);\n//unescape function taken from https://github.com/jquery/sizzle/blob/master/src/sizzle.js#L152\nfunction funescape(_, escaped, escapedWhitespace) {\n    var high = parseInt(escaped, 16) - 0x10000;\n    // NaN means non-codepoint\n    return high !== high || escapedWhitespace\n        ? escaped\n        : high < 0\n            ? // BMP codepoint\n                String.fromCharCode(high + 0x10000)\n            : // Supplemental Plane codepoint (surrogate pair)\n                String.fromCharCode((high >> 10) | 0xd800, (high & 0x3ff) | 0xdc00);\n}\nfunction unescapeCSS(str) {\n    return str.replace(reEscape, funescape);\n}\nfunction isWhitespace(c) {\n    return c === \" \" || c === \"\\n\" || c === \"\\t\" || c === \"\\f\" || c === \"\\r\";\n}\nfunction parse(selector, options) {\n    var subselects = [];\n    selector = parseSelector(subselects, \"\" + selector, options);\n    if (selector !== \"\") {\n        throw new Error(\"Unmatched selector: \" + selector);\n    }\n    return subselects;\n}\nfunction parseSelector(subselects, selector, options) {\n    var tokens = [];\n    var sawWS = false;\n    function getName() {\n        var match = selector.match(reName);\n        if (!match) {\n            throw new Error(\"Expected name, found \" + selector);\n        }\n        var sub = match[0];\n        selector = selector.substr(sub.length);\n        return unescapeCSS(sub);\n    }\n    function stripWhitespace(start) {\n        while (isWhitespace(selector.charAt(start)))\n            start++;\n        selector = selector.substr(start);\n    }\n    function isEscaped(pos) {\n        var slashCount = 0;\n        while (selector.charAt(--pos) === \"\\\\\")\n            slashCount++;\n        return (slashCount & 1) === 1;\n    }\n    stripWhitespace(0);\n    while (selector !== \"\") {\n        var firstChar = selector.charAt(0);\n        if (isWhitespace(firstChar)) {\n            sawWS = true;\n            stripWhitespace(1);\n        }\n        else if (firstChar in Traversals) {\n            tokens.push({ type: Traversals[firstChar] });\n            sawWS = false;\n            stripWhitespace(1);\n        }\n        else if (firstChar === \",\") {\n            if (tokens.length === 0) {\n                throw new Error(\"Empty sub-selector\");\n            }\n            subselects.push(tokens);\n            tokens = [];\n            sawWS = false;\n            stripWhitespace(1);\n        }\n        else {\n            if (sawWS) {\n                if (tokens.length > 0) {\n                    tokens.push({ type: \"descendant\" });\n                }\n                sawWS = false;\n            }\n            if (firstChar === \"*\") {\n                selector = selector.substr(1);\n                tokens.push({ type: \"universal\" });\n            }\n            else if (firstChar in attribSelectors) {\n                var _a = attribSelectors[firstChar], name_1 = _a[0], action = _a[1];\n                selector = selector.substr(1);\n                tokens.push({\n                    type: \"attribute\",\n                    name: name_1,\n                    action: action,\n                    value: getName(),\n                    ignoreCase: false,\n                });\n            }\n            else if (firstChar === \"[\") {\n                selector = selector.substr(1);\n                var data = selector.match(reAttr);\n                if (!data) {\n                    throw new Error(\"Malformed attribute selector: \" + selector);\n                }\n                selector = selector.substr(data[0].length);\n                var name_2 = unescapeCSS(data[1]);\n                if (!options ||\n                    (\"lowerCaseAttributeNames\" in options\n                        ? options.lowerCaseAttributeNames\n                        : !options.xmlMode)) {\n                    name_2 = name_2.toLowerCase();\n                }\n                tokens.push({\n                    type: \"attribute\",\n                    name: name_2,\n                    action: actionTypes[data[2]],\n                    value: unescapeCSS(data[4] || data[5] || \"\"),\n                    ignoreCase: !!data[6],\n                });\n            }\n            else if (firstChar === \":\") {\n                if (selector.charAt(1) === \":\") {\n                    selector = selector.substr(2);\n                    tokens.push({\n                        type: \"pseudo-element\",\n                        name: getName().toLowerCase(),\n                    });\n                    continue;\n                }\n                selector = selector.substr(1);\n                var name_3 = getName().toLowerCase();\n                var data = null;\n                if (selector.charAt(0) === \"(\") {\n                    if (unpackPseudos.has(name_3)) {\n                        var quot = selector.charAt(1);\n                        var quoted = quotes.has(quot);\n                        selector = selector.substr(quoted ? 2 : 1);\n                        data = [];\n                        selector = parseSelector(data, selector, options);\n                        if (quoted) {\n                            if (selector.charAt(0) !== quot) {\n                                throw new Error(\"Unmatched quotes in :\" + name_3);\n                            }\n                            else {\n                                selector = selector.substr(1);\n                            }\n                        }\n                        if (selector.charAt(0) !== \")\") {\n                            throw new Error(\"Missing closing parenthesis in :\" + name_3 + \" (\" + selector + \")\");\n                        }\n                        selector = selector.substr(1);\n                    }\n                    else {\n                        var pos = 1;\n                        var counter = 1;\n                        for (; counter > 0 && pos < selector.length; pos++) {\n                            if (selector.charAt(pos) === \"(\" && !isEscaped(pos))\n                                counter++;\n                            else if (selector.charAt(pos) === \")\" &&\n                                !isEscaped(pos))\n                                counter--;\n                        }\n                        if (counter) {\n                            throw new Error(\"Parenthesis not matched\");\n                        }\n                        data = selector.substr(1, pos - 2);\n                        selector = selector.substr(pos);\n                        if (stripQuotesFromPseudos.has(name_3)) {\n                            var quot = data.charAt(0);\n                            if (quot === data.slice(-1) && quotes.has(quot)) {\n                                data = data.slice(1, -1);\n                            }\n                            data = unescapeCSS(data);\n                        }\n                    }\n                }\n                tokens.push({ type: \"pseudo\", name: name_3, data: data });\n            }\n            else if (reName.test(selector)) {\n                var name_4 = getName();\n                if (!options ||\n                    (\"lowerCaseTags\" in options\n                        ? options.lowerCaseTags\n                        : !options.xmlMode)) {\n                    name_4 = name_4.toLowerCase();\n                }\n                tokens.push({ type: \"tag\", name: name_4 });\n            }\n            else {\n                if (tokens.length &&\n                    tokens[tokens.length - 1].type === \"descendant\") {\n                    tokens.pop();\n                }\n                addToken(subselects, tokens);\n                return selector;\n            }\n        }\n    }\n    addToken(subselects, tokens);\n    return selector;\n}\nfunction addToken(subselects, tokens) {\n    if (subselects.length > 0 && tokens.length === 0) {\n        throw new Error(\"Empty sub-selector\");\n    }\n    subselects.push(tokens);\n}\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar actionTypes = {\n    equals: \"\",\n    element: \"~\",\n    start: \"^\",\n    end: \"$\",\n    any: \"*\",\n    not: \"!\",\n    hyphen: \"|\",\n};\nfunction stringify(token) {\n    return token.map(stringifySubselector).join(\", \");\n}\nexports.default = stringify;\nfunction stringifySubselector(token) {\n    return token.map(stringifyToken).join(\"\");\n}\nfunction stringifyToken(token) {\n    switch (token.type) {\n        // Simple types\n        case \"child\":\n            return \" > \";\n        case \"parent\":\n            return \" < \";\n        case \"sibling\":\n            return \" ~ \";\n        case \"adjacent\":\n            return \" + \";\n        case \"descendant\":\n            return \" \";\n        case \"universal\":\n            return \"*\";\n        case \"tag\":\n            return escapeName(token.name);\n        case \"pseudo-element\":\n            return \"::\" + escapeName(token.name);\n        case \"pseudo\":\n            if (token.data === null)\n                return \":\" + escapeName(token.name);\n            if (typeof token.data === \"string\") {\n                return \":\" + escapeName(token.name) + \"(\" + token.data + \")\";\n            }\n            return \":\" + escapeName(token.name) + \"(\" + stringify(token.data) + \")\";\n        case \"attribute\":\n            if (token.action === \"exists\") {\n                return \"[\" + escapeName(token.name) + \"]\";\n            }\n            if (token.name === \"id\" &&\n                token.action === \"equals\" &&\n                !token.ignoreCase) {\n                return \"#\" + escapeName(token.value);\n            }\n            if (token.name === \"class\" &&\n                token.action === \"element\" &&\n                !token.ignoreCase) {\n                return \".\" + escapeName(token.value);\n            }\n            return \"[\" + escapeName(token.name) + actionTypes[token.action] + \"='\" + escapeName(token.value) + \"'\" + (token.ignoreCase ? \"i\" : \"\") + \"]\";\n        default:\n            throw new Error(\"Unknown type\");\n    }\n}\nfunction escapeName(str) {\n    //TODO\n    return str;\n}\n"]}