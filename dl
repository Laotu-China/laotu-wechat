[33mcommit a319558f7fce56f500391f0c3ad421868b87253d[m
Author: Justin Jung <justinsoljung@gmail.com>
Date:   Mon Aug 17 17:09:54 2020 -0700

    working on events page. built products page

[1mdiff --git a/miniprogram/miniprogram_npm/weui-miniprogram/searchbar/searchbar.js b/miniprogram/miniprogram_npm/weui-miniprogram/searchbar/searchbar.js[m
[1mindex 31d2559..a7fec40 100644[m
[1m--- a/miniprogram/miniprogram_npm/weui-miniprogram/searchbar/searchbar.js[m
[1m+++ b/miniprogram/miniprogram_npm/weui-miniprogram/searchbar/searchbar.js[m
[36m@@ -108,7 +108,7 @@[m [mComponent({[m
     },[m
     placeholder: {[m
       type: String,[m
[31m-      value: 'Search'[m
[32m+[m[32m      value: 'ÊêúÁ¥¢'[m
     },[m
     value: {[m
       type: String,[m
[36m@@ -122,39 +122,21 @@[m [mComponent({[m
     },[m
     throttle: {[m
       // 500msÂÜÖÂè™‰ºöË∞ÉÁî®‰∏ÄÊ¨°searchÂáΩÊï∞[m
[31m-      //CHANGE TO 0 in order to solve race condition problems[m
       type: Number,[m
[31m-      value: 0[m
[32m+[m[32m      value: 500[m
     },[m
     cancelText: {[m
       type: String,[m
[31m-      value: 'Cancel'[m
[32m+[m[32m      value: 'ÂèñÊ∂à'[m
     },[m
     cancel: {[m
       type: Boolean,[m
       value: true[m
[31m-    },[m
[31m-    searchResultsData: {[m
[31m-      //An array of strings of the search results[m
[31m-      type: Array,[m
[31m-      value: [][m
[31m-    },[m
[31m-    isNavigator: {[m
[31m-      //Parent page should pass is this boolean to determine whether or not the search bar should redirect to the searchPage[m
[31m-      type: Boolean[m
[31m-    },[m
[31m-    searchObjectsArray: {[m
[31m-      //An array of search result objects that contain the ID and title and other descriptors [m
[31m-      type: Array[m
[31m-    },[m
[31m-    type: {[m
[31m-      //Either "product" or "event"[m
[31m-      type: String[m
     }[m
   },[m
   data: {[m
[31m-    result: [], // ÊêúÁ¥¢ÁªìÊûú,[m
[31m-    topSearchResults: [] //top five matching search results to the user's input. Contains strings[m
[32m+[m[32m    result: [] // ÊêúÁ¥¢ÁªìÊûú[m
[32m+[m
   },[m
 [m
   /* @ts-ignore */[m
[36m@@ -162,115 +144,17 @@[m [mComponent({[m
   lifetimes: {[m
     // @ts-ignore[m
     attached() {[m
[31m-      var that = this;[m
[31m-      [m
       // @ts-ignore[m
       if (this.data.focus) {[m
         this.setData({[m
           searchState: true[m
         });[m
       }[m
[31m-[m
[31m-      //If the searchbar is not a navigator (aka on the searchPage), should immediately be focused and in searchState === true[m
[31m-      if (!this.data.isNavigator){[m
[31m-        this.setData({[m
[31m-          searchState: true[m
[31m-        });[m
[31m-[m
[31m-      }[m
[31m-[m
[31m-      [m
[31m-[m
[31m-[m
[31m-      //Add our default search function. If user adds own search function to parameter, default will be overridden[m
[31m-      var defaultSearch = function (value) {[m
[31m-        [m
[31m-        //Should return a promise containing an array of result values[m
[31m-        //Lowercase all of user input so search results are not case sensitive[m
[31m-        let userInput = value.toLowerCase();[m
[31m-       [m
[31m-        //Get the array of possible search results objects[m
[31m-        let searchResultsObjects = that.data.searchObjectsArray;[m
[31m-        //Get the array of possible search results (each object contains just the title and the unique ID)[m
[31m-        let searchResultsData = searchResultsObjects.map(function(obj){[m
[31m-          return {[m
[31m-            title: obj.title,[m
[31m-            id: obj._id[m
[31m-          }[m
[31m-        });[m
[31m-       [m
[31m-        if (searchResultsData.length < 1){[m
[31m-          //Developer did not enter enough search results in to the component[m
[31m-          console.error("Forgot to add possible search results to the component");[m
[31m-        }[m
[31m-[m
[31m-        /*Search result generation: find all results that match the first n letters of the input- if none are found, try n-1.[m
[31m-        If not a single letter matches, return an array containing text ["Could not find matching results."] */[m
[31m-        let numChars = userInput.length;[m
[31m-        if (numChars < 1){[m
[31m-         [m
[31m-          //User backspaced all the way, should hide input[m
[31m-          that.setData({[m
[31m-            searchState: false[m
[31m-          });[m
[31m-          //Return an empty array so that no search results pop up[m
[31m-          return new Promise((resolve, reject) => {[m
[31m-            setTimeout(() => {[m
[31m-                resolve([])[m
[31m-            }, 200)[m
[31m-          }); [m
[31m-        }[m
[31m-        var matchResults = [];[m
[31m-        for (let n = numChars; n > 0 ; n--){[m
[31m-          //Try getting only results where the first n letters match. Continue to n-1, n-2... 1 letters match[m
[31m-          let userInputSubStr = userInput.substring(0, n);[m
[31m-          //Expect an array as a return value from filter[m
[31m-          matchResults = searchResultsData.filter(function(res){[m
[31m-            //Lower case the result string so it is not case sensitive[m
[31m-            let lowerRes = res.title.toLowerCase(); [m
[31m-            return lowerRes.startsWith(userInputSubStr);[m
[31m-          });[m
[31m-          if (matchResults.length > 0){[m
[31m-            //Got results that matches the first n chars[m
[31m-            break;[m
[31m-          }[m
[31m-          else{[m
[31m-            //Didn't get any results that match the first n chars. Continue...[m
[31m-          }[m
[31m-        }[m
[31m-        [m
[31m-        //If there are no match results, return an array with a certain text[m
[31m-        if (matchResults.length < 1){[m
[31m-          matchResults = [{title: "Could not find matching results.", id: ""}];[m
[31m-        }[m
[31m-[m
[31m-        //Limit to max 10 match results[m
[31m-        matchResults = matchResults.slice(0,10);[m
[31m-        console.log("matchResults: ", matchResults);[m
[31m-[m
[31m-        //Create our array of objects that will be used for the searchbar[m
[31m-        let matchResultsObjects = matchResults.map(function(res, index){[m
[31m-          return ({text: res.title, value: index + 1, id: res.id});[m
[31m-        });[m
[31m-        [m
[31m-        return new Promise((resolve, reject) => {[m
[31m-            setTimeout(() => {[m
[31m-                resolve(matchResultsObjects)[m
[31m-            }, 200)[m
[31m-        });[m
[31m-      }[m
[31m-      this.setData({[m
[31m-        search: defaultSearch[m
[31m-      });[m
[31m-    },[m
[31m-    ready() {[m
[31m-      console.log(this.data.type);[m
     }[m
 [m
   },[m
   methods: {[m
     clearInput() {[m
[31m-      console.log("Clear Input called");[m
       // @ts-ignore[m
       this.setData({[m
         value: '',[m
[36m@@ -283,21 +167,15 @@[m [mComponent({[m
 [m
     // @ts-ignore[m
     inputFocus(e) {[m
[31m-      console.log("inputFocus called");[m
       // this.setData({[m
       //     searchState: true[m
       // })[m
       // @ts-ignore[m
[31m-      //If the search bar is a navigator, it should do nothing here[m
[31m-      if (!this.data.isNavigator){[m
[31m-        this.triggerEvent('focus', e.detail);[m
[31m-      }[m
[31m-      [m
[32m+[m[32m      this.triggerEvent('focus', e.detail);[m
     },[m
 [m
     // @ts-ignore[m
     inputBlur(e) {[m
[31m-      console.log("inputBlur called");[m
       this.setData({[m
         focus: false[m
       });[m
[36m@@ -305,141 +183,57 @@[m [mComponent({[m
     },[m
 [m
     showInput() {[m
[31m-      console.log("showInput called");[m
[31m-      //If the search bar is a navigator, it should do nothing here[m
[31m-      if (!this.data.isNavigator){[m
[31m-        this.setData({[m
[31m-          focus: true,[m
[31m-          searchState: true[m
[31m-        });[m
[31m-      }[m
[32m+[m[32m      this.setData({[m
[32m+[m[32m        focus: true,[m
[32m+[m[32m        searchState: true[m
[32m+[m[32m      });[m
     },[m
 [m
     hideInput() {[m
[31m-      console.log("Hide input is called");[m
       this.setData({[m
         searchState: false[m
       });[m
     },[m
 [m
     // @ts-ignore[m
[31m-    inputChange: function(e) {[m
[31m-      var that = this;[m
[31m-      [m
[32m+[m[32m    inputChange(e) {[m
       this.setData({[m
         value: e.detail.value[m
       });[m
       this.triggerEvent('input', e.detail);[m
[31m-      [m
[31m-      [m
[32m+[m
       if (Date.now() - this.lastSearch < this.data.throttle) {[m
         return;[m
       }[m
 [m
[31m-[m
[31m-      //This prevents any input from triggering if search is not a function in the paramters[m
       if (typeof this.data.search !== 'function') {[m
         return;[m
       }[m
[31m-      [m
[31m-      //Wait for the searchObjectsArray to be initialized before we call the search function[m
[31m-      var checkSearchObjectsLoaded = function(){[m
[31m-        return new Promise(function(resolve, reject){[m
[31m-          (function waitForArray(){[m
[31m-            if (that.data.searchObjectsArray.length > 0){[m
[31m-              //Data is set[m
[31m-              return resolve();[m
[31m-            }[m
[31m-            else{[m
[31m-              //Continually loop until the data is set[m
[31m-              setTimeout(waitForArray, 250);[m
[31m-            }[m
[31m-          })();[m
[32m+[m
[32m+[m[32m      this.lastSearch = Date.now();[m
[32m+[m[32m      this.timerId = setTimeout(() => {[m
[32m+[m[32m        this.data.search(e.detail.value).then(json => {[m
[32m+[m[32m          this.setData({[m
[32m+[m[32m            result: json[m
[32m+[m[32m          });[m
[32m+[m[32m        }).catch(err => {[m
[32m+[m[32m          console.error('search error', err);[m
         });[m
[31m-      }[m
[31m-      checkSearchObjectsLoaded()[m
[31m-        .then(function(){[m
[31m-          //searchObjectsArray is fully loaded- call our search function[m
[31m-          that.lastSearch = Date.now();[m
[31m-          that.timerId = setTimeout(() => {[m
[31m-            //Calls my search function[m
[31m-            [m
[31m-            that.data.search(e.detail.value).then(json => {[m
[31m-              console.log("result is: ", json);[m
[31m-              that.setData({[m
[31m-                result: json[m
[31m-              });[m
[31m-            }).catch(err => {[m
[31m-              console.error('search error', err);[m
[31m-            });[m
[31m-          }, that.data.throttle);[m
[31m-        })[m
[32m+[m[32m      }, this.data.throttle);[m
     },[m
 [m
     // @ts-ignore[m
     selectResult(e) {[m
[31m-      console.log("selectResult called");[m
[31m-      //Pass the ID and the type of the item[m
       const {[m
         index[m
       } = e.currentTarget.dataset;[m
       const item = this.data.result[index];[m
[31m-      const type = this.data.type;[m
       this.triggerEvent('selectresult', {[m
[31m-        item,[m
[31m-        type[m
[32m+[m[32m        index,[m
[32m+[m[32m        item[m
       });[m
[31m-    },[m
[31m-    tapped(){[m
[31m-      console.log("tapped called");[m
[31m-      var that = this;[m
[31m-      [m
[31m-      //Function is called when user clicks on the search bar. [m
[31m-      //If search bar is supposed to act as a navigator (isNavigator === true), redirect to searchPage[m
[31m-      if (this.data.isNavigator){[m
[31m-       [m
[31m-        //Wait for searchObjectsArray. Function returns a promise only when the searchObjectsArray is not an empty array[m
[31m-        var checkSearchObjectsLoaded = function(){[m
[31m-          return new Promise(function(resolve, reject){[m
[31m-            (function waitForArray(){[m
[31m-              if (that.data.searchObjectsArray.length > 0){[m
[31m-                //Data is set[m
[31m-                return resolve();[m
[31m-              }[m
[31m-              else{[m
[31m-                //Continually loop until the data is set[m
[31m-                setTimeout(waitForArray, 250);[m
[31m-              }[m
[31m-            })();[m
[31m-          });[m
[31m-        }[m
[31m-[m
[31m-        //Redirect to searchPage[m
[31m-        wx.navigateTo({[m
[31m-          //Can pass the list of search result objects to the searchPage[m
[31m-          url: '../../pages/searchPage/searchPage',[m
[31m-          success: async function(res){[m
[31m-            //Wait for searchObjectsArray to be sent (aka length > 0)[m
[31m-            await checkSearchObjectsLoaded();[m
[31m-            [m
[31m-            //Send our data to the searchPage[m
[31m-            res.eventChannel.emit('acceptDataFromOpenerPage', {[m
[31m-              type: that.data.type,[m
[31m-              searchObjectsArray: that.data.searchObjectsArray[m
[31m-            });[m
[31m-             [m
[31m-          }[m
[31m-        })[m
[31m-        //Clear the search page to the original state[m
[31m-        this.setData({[m
[31m-          searchState: false[m
[31m-        });[m
[31m-      }[m
[31m-      else{[m
[31m-        //Do nothing[m
[31m-        console.log("Not a navigator. Do nothing");[m
[31m-      } [m
     }[m
[32m+[m
   }[m
 });[m
 [m

[33mcommit 5765083604ea07885ba80dc59523d906b01cfc0e[m
Author: Justin Jung <justinsoljung@gmail.com>
Date:   Mon Aug 17 14:17:31 2020 -0700

    fixed search bar. Now I need to transmit type to the searchPage

[1mdiff --git a/miniprogram/miniprogram_npm/weui-miniprogram/searchbar/searchbar.js b/miniprogram/miniprogram_npm/weui-miniprogram/searchbar/searchbar.js[m
[1mindex a10cb11..31d2559 100644[m
[1m--- a/miniprogram/miniprogram_npm/weui-miniprogram/searchbar/searchbar.js[m
[1m+++ b/miniprogram/miniprogram_npm/weui-miniprogram/searchbar/searchbar.js[m
[36m@@ -191,10 +191,15 @@[m [mComponent({[m
        [m
         //Get the array of possible search results objects[m
         let searchResultsObjects = that.data.searchObjectsArray;[m
[31m-        //Get the array of possible search result titles[m
[31m-        let searchResultsTitles = searchResultsObjects.map(obj => obj.title);[m
[32m+[m[32m        //Get the array of possible search results (each object contains just the title and the unique ID)[m
[32m+[m[32m        let searchResultsData = searchResultsObjects.map(function(obj){[m
[32m+[m[32m          return {[m
[32m+[m[32m            title: obj.title,[m
[32m+[m[32m            id: obj._id[m
[32m+[m[32m          }[m
[32m+[m[32m        });[m
        [m
[31m-        if (searchResultsTitles.length < 1){[m
[32m+[m[32m        if (searchResultsData.length < 1){[m
           //Developer did not enter enough search results in to the component[m
           console.error("Forgot to add possible search results to the component");[m
         }[m
[36m@@ -220,9 +225,9 @@[m [mComponent({[m
           //Try getting only results where the first n letters match. Continue to n-1, n-2... 1 letters match[m
           let userInputSubStr = userInput.substring(0, n);[m
           //Expect an array as a return value from filter[m
[31m-          matchResults = searchResultsTitles.filter(function(res){[m
[32m+[m[32m          matchResults = searchResultsData.filter(function(res){[m
             //Lower case the result string so it is not case sensitive[m
[31m-            let lowerRes = res.toLowerCase(); [m
[32m+[m[32m            let lowerRes = res.title.toLowerCase();[m[41m [m
             return lowerRes.startsWith(userInputSubStr);[m
           });[m
           if (matchResults.length > 0){[m
[36m@@ -234,20 +239,18 @@[m [mComponent({[m
           }[m
         }[m
         [m
[31m-        //Upload the top 5 matching search results[m
[31m-        let topSearchResults = matchResults.slice(0, 5);[m
[31m-        that.setData({[m
[31m-          topSearchResults[m
[31m-        });[m
[31m-        [m
         //If there are no match results, return an array with a certain text[m
         if (matchResults.length < 1){[m
[31m-          matchResults = ["Could not find matching results."];[m
[32m+[m[32m          matchResults = [{title: "Could not find matching results.", id: ""}];[m
         }[m
 [m
[32m+[m[32m        //Limit to max 10 match results[m
[32m+[m[32m        matchResults = matchResults.slice(0,10);[m
[32m+[m[32m        console.log("matchResults: ", matchResults);[m
[32m+[m
         //Create our array of objects that will be used for the searchbar[m
         let matchResultsObjects = matchResults.map(function(res, index){[m
[31m-          return ({text: res, value: index + 1});[m
[32m+[m[32m          return ({text: res.title, value: index + 1, id: res.id});[m
         });[m
         [m
         return new Promise((resolve, reject) => {[m
[36m@@ -261,7 +264,7 @@[m [mComponent({[m
       });[m
     },[m
     ready() {[m
[31m-      [m
[32m+[m[32m      console.log(this.data.type);[m
     }[m
 [m
   },[m
[36m@@ -362,7 +365,7 @@[m [mComponent({[m
             //Calls my search function[m
             [m
             that.data.search(e.detail.value).then(json => {[m
[31m-            [m
[32m+[m[32m              console.log("result is: ", json);[m
               that.setData({[m
            